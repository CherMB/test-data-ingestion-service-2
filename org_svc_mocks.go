// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calculi-corp/api/go/auth (interfaces: OrganizationsServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	auth "github.com/calculi-corp/api/go/auth"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockOrganizationsServiceClient is a mock of OrganizationsServiceClient interface.
type MockOrganizationsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsServiceClientMockRecorder
}

// MockOrganizationsServiceClientMockRecorder is the mock recorder for MockOrganizationsServiceClient.
type MockOrganizationsServiceClientMockRecorder struct {
	mock *MockOrganizationsServiceClient
}

// NewMockOrganizationsServiceClient creates a new mock instance.
func NewMockOrganizationsServiceClient(ctrl *gomock.Controller) *MockOrganizationsServiceClient {
	mock := &MockOrganizationsServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsServiceClient) EXPECT() *MockOrganizationsServiceClientMockRecorder {
	return m.recorder
}

// AutomaticOrgCreation mocks base method.
func (m *MockOrganizationsServiceClient) AutomaticOrgCreation(arg0 context.Context, arg1 *auth.AutomaticOrgCreationRequest, arg2 ...grpc.CallOption) (*auth.AutomaticOrgCreationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutomaticOrgCreation", varargs...)
	ret0, _ := ret[0].(*auth.AutomaticOrgCreationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutomaticOrgCreation indicates an expected call of AutomaticOrgCreation.
func (mr *MockOrganizationsServiceClientMockRecorder) AutomaticOrgCreation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutomaticOrgCreation", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).AutomaticOrgCreation), varargs...)
}

// CheckOrganizationDomainUniqueness mocks base method.
func (m *MockOrganizationsServiceClient) CheckOrganizationDomainUniqueness(arg0 context.Context, arg1 *auth.DomainAvailibilityRequest, arg2 ...grpc.CallOption) (*auth.DomainAvailibilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckOrganizationDomainUniqueness", varargs...)
	ret0, _ := ret[0].(*auth.DomainAvailibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrganizationDomainUniqueness indicates an expected call of CheckOrganizationDomainUniqueness.
func (mr *MockOrganizationsServiceClientMockRecorder) CheckOrganizationDomainUniqueness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrganizationDomainUniqueness", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).CheckOrganizationDomainUniqueness), varargs...)
}

// CreateOrganization mocks base method.
func (m *MockOrganizationsServiceClient) CreateOrganization(arg0 context.Context, arg1 *auth.CreateOrganizationRequest, arg2 ...grpc.CallOption) (*auth.CreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganization", varargs...)
	ret0, _ := ret[0].(*auth.CreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationsServiceClientMockRecorder) CreateOrganization(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).CreateOrganization), varargs...)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationsServiceClient) DeleteOrganization(arg0 context.Context, arg1 *auth.DeleteOrganizationRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganization", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationsServiceClientMockRecorder) DeleteOrganization(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).DeleteOrganization), varargs...)
}

// GetOrganizationById mocks base method.
func (m *MockOrganizationsServiceClient) GetOrganizationById(arg0 context.Context, arg1 *auth.GetOrganizationByIdRequest, arg2 ...grpc.CallOption) (*auth.GetOrganizationByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationById", varargs...)
	ret0, _ := ret[0].(*auth.GetOrganizationByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationById indicates an expected call of GetOrganizationById.
func (mr *MockOrganizationsServiceClientMockRecorder) GetOrganizationById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationById", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).GetOrganizationById), varargs...)
}

// GetOrganizationByName mocks base method.
func (m *MockOrganizationsServiceClient) GetOrganizationByName(arg0 context.Context, arg1 *auth.GetOrganizationByNameRequest, arg2 ...grpc.CallOption) (*auth.GetOrganizationByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationByName", varargs...)
	ret0, _ := ret[0].(*auth.GetOrganizationByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockOrganizationsServiceClientMockRecorder) GetOrganizationByName(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).GetOrganizationByName), varargs...)
}

// GetOrganizations mocks base method.
func (m *MockOrganizationsServiceClient) GetOrganizations(arg0 context.Context, arg1 *auth.GetOrganizationsRequest, arg2 ...grpc.CallOption) (*auth.GetOrganizationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizations", varargs...)
	ret0, _ := ret[0].(*auth.GetOrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockOrganizationsServiceClientMockRecorder) GetOrganizations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).GetOrganizations), varargs...)
}

// MarkOrganizationInternal mocks base method.
func (m *MockOrganizationsServiceClient) MarkOrganizationInternal(arg0 context.Context, arg1 *auth.UpdateOrganizationRequest, arg2 ...grpc.CallOption) (*auth.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkOrganizationInternal", varargs...)
	ret0, _ := ret[0].(*auth.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkOrganizationInternal indicates an expected call of MarkOrganizationInternal.
func (mr *MockOrganizationsServiceClientMockRecorder) MarkOrganizationInternal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOrganizationInternal", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).MarkOrganizationInternal), varargs...)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationsServiceClient) UpdateOrganization(arg0 context.Context, arg1 *auth.UpdateOrganizationRequest, arg2 ...grpc.CallOption) (*auth.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganization", varargs...)
	ret0, _ := ret[0].(*auth.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationsServiceClientMockRecorder) UpdateOrganization(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).UpdateOrganization), varargs...)
}

// VpcOrgCreation mocks base method.
func (m *MockOrganizationsServiceClient) VpcOrgCreation(arg0 context.Context, arg1 *auth.VpcOrgCreationRequest, arg2 ...grpc.CallOption) (*auth.VpcOrgCreationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VpcOrgCreation", varargs...)
	ret0, _ := ret[0].(*auth.VpcOrgCreationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VpcOrgCreation indicates an expected call of VpcOrgCreation.
func (mr *MockOrganizationsServiceClientMockRecorder) VpcOrgCreation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VpcOrgCreation", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).VpcOrgCreation), varargs...)
}
