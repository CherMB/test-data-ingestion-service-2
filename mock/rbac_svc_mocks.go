// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calculi-corp/api/go/auth (interfaces: RBACServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=./rbac_svc_mocks.go -package=mock github.com/calculi-corp/api/go/auth RBACServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	auth "github.com/calculi-corp/api/go/auth"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockRBACServiceClient is a mock of RBACServiceClient interface.
type MockRBACServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRBACServiceClientMockRecorder
	isgomock struct{}
}

// MockRBACServiceClientMockRecorder is the mock recorder for MockRBACServiceClient.
type MockRBACServiceClientMockRecorder struct {
	mock *MockRBACServiceClient
}

// NewMockRBACServiceClient creates a new mock instance.
func NewMockRBACServiceClient(ctrl *gomock.Controller) *MockRBACServiceClient {
	mock := &MockRBACServiceClient{ctrl: ctrl}
	mock.recorder = &MockRBACServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACServiceClient) EXPECT() *MockRBACServiceClientMockRecorder {
	return m.recorder
}

// Authorized mocks base method.
func (m *MockRBACServiceClient) Authorized(ctx context.Context, in *auth.AuthorizationRequest, opts ...grpc.CallOption) (*auth.AuthorizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authorized", varargs...)
	ret0, _ := ret[0].(*auth.AuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorized indicates an expected call of Authorized.
func (mr *MockRBACServiceClientMockRecorder) Authorized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorized", reflect.TypeOf((*MockRBACServiceClient)(nil).Authorized), varargs...)
}

// CheckAuthorizedPermissions mocks base method.
func (m *MockRBACServiceClient) CheckAuthorizedPermissions(ctx context.Context, in *auth.CheckRolesRequest, opts ...grpc.CallOption) (*auth.CheckRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckAuthorizedPermissions", varargs...)
	ret0, _ := ret[0].(*auth.CheckRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthorizedPermissions indicates an expected call of CheckAuthorizedPermissions.
func (mr *MockRBACServiceClientMockRecorder) CheckAuthorizedPermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizedPermissions", reflect.TypeOf((*MockRBACServiceClient)(nil).CheckAuthorizedPermissions), varargs...)
}

// CreateAuthorization mocks base method.
func (m *MockRBACServiceClient) CreateAuthorization(ctx context.Context, in *auth.CreateAuthorizationRequest, opts ...grpc.CallOption) (*auth.CreateAuthorizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthorization", varargs...)
	ret0, _ := ret[0].(*auth.CreateAuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorization indicates an expected call of CreateAuthorization.
func (mr *MockRBACServiceClientMockRecorder) CreateAuthorization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorization", reflect.TypeOf((*MockRBACServiceClient)(nil).CreateAuthorization), varargs...)
}

// CreatePermission mocks base method.
func (m *MockRBACServiceClient) CreatePermission(ctx context.Context, in *auth.CreatePermissionRequest, opts ...grpc.CallOption) (*auth.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePermission", varargs...)
	ret0, _ := ret[0].(*auth.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockRBACServiceClientMockRecorder) CreatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).CreatePermission), varargs...)
}

// CreateRole mocks base method.
func (m *MockRBACServiceClient) CreateRole(ctx context.Context, in *auth.CreateRoleRequest, opts ...grpc.CallOption) (*auth.CreateRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(*auth.CreateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRBACServiceClientMockRecorder) CreateRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRBACServiceClient)(nil).CreateRole), varargs...)
}

// DeleteAuthorization mocks base method.
func (m *MockRBACServiceClient) DeleteAuthorization(ctx context.Context, in *auth.DeleteAuthorizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthorization", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorization indicates an expected call of DeleteAuthorization.
func (mr *MockRBACServiceClientMockRecorder) DeleteAuthorization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorization", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteAuthorization), varargs...)
}

// DeleteAuthorizations mocks base method.
func (m *MockRBACServiceClient) DeleteAuthorizations(ctx context.Context, in *auth.DeleteAuthorizationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthorizations", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizations indicates an expected call of DeleteAuthorizations.
func (mr *MockRBACServiceClientMockRecorder) DeleteAuthorizations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizations", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteAuthorizations), varargs...)
}

// DeletePermission mocks base method.
func (m *MockRBACServiceClient) DeletePermission(ctx context.Context, in *auth.DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermission", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockRBACServiceClientMockRecorder) DeletePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).DeletePermission), varargs...)
}

// DeleteRole mocks base method.
func (m *MockRBACServiceClient) DeleteRole(ctx context.Context, in *auth.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRBACServiceClientMockRecorder) DeleteRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteRole), varargs...)
}

// DeleteRoleV2 mocks base method.
func (m *MockRBACServiceClient) DeleteRoleV2(ctx context.Context, in *auth.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleV2", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleV2 indicates an expected call of DeleteRoleV2.
func (mr *MockRBACServiceClientMockRecorder) DeleteRoleV2(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleV2", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteRoleV2), varargs...)
}

// GetAuthorizationById mocks base method.
func (m *MockRBACServiceClient) GetAuthorizationById(ctx context.Context, in *auth.GetAuthorizationByIdRequest, opts ...grpc.CallOption) (*auth.GetAuthorizationByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizationById", varargs...)
	ret0, _ := ret[0].(*auth.GetAuthorizationByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationById indicates an expected call of GetAuthorizationById.
func (mr *MockRBACServiceClientMockRecorder) GetAuthorizationById(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationById", reflect.TypeOf((*MockRBACServiceClient)(nil).GetAuthorizationById), varargs...)
}

// GetAuthorizationRolesByUserId mocks base method.
func (m *MockRBACServiceClient) GetAuthorizationRolesByUserId(ctx context.Context, in *auth.GetAuthorizationRolesByUserIdRequest, opts ...grpc.CallOption) (*auth.GetAuthorizationRolesByUserIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizationRolesByUserId", varargs...)
	ret0, _ := ret[0].(*auth.GetAuthorizationRolesByUserIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationRolesByUserId indicates an expected call of GetAuthorizationRolesByUserId.
func (mr *MockRBACServiceClientMockRecorder) GetAuthorizationRolesByUserId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationRolesByUserId", reflect.TypeOf((*MockRBACServiceClient)(nil).GetAuthorizationRolesByUserId), varargs...)
}

// GetAuthorizedSubOrgsByUserId mocks base method.
func (m *MockRBACServiceClient) GetAuthorizedSubOrgsByUserId(ctx context.Context, in *auth.GetAuthorizedSubOrgsByUserIdRequest, opts ...grpc.CallOption) (*auth.GetAuthorizedSubOrgsByUserIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizedSubOrgsByUserId", varargs...)
	ret0, _ := ret[0].(*auth.GetAuthorizedSubOrgsByUserIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizedSubOrgsByUserId indicates an expected call of GetAuthorizedSubOrgsByUserId.
func (mr *MockRBACServiceClientMockRecorder) GetAuthorizedSubOrgsByUserId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizedSubOrgsByUserId", reflect.TypeOf((*MockRBACServiceClient)(nil).GetAuthorizedSubOrgsByUserId), varargs...)
}

// GetContextUserId mocks base method.
func (m *MockRBACServiceClient) GetContextUserId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*auth.GetContextUserIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContextUserId", varargs...)
	ret0, _ := ret[0].(*auth.GetContextUserIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextUserId indicates an expected call of GetContextUserId.
func (mr *MockRBACServiceClientMockRecorder) GetContextUserId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextUserId", reflect.TypeOf((*MockRBACServiceClient)(nil).GetContextUserId), varargs...)
}

// GetRole mocks base method.
func (m *MockRBACServiceClient) GetRole(ctx context.Context, in *auth.GetRoleRequest, opts ...grpc.CallOption) (*auth.GetRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*auth.GetRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRBACServiceClientMockRecorder) GetRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRBACServiceClient)(nil).GetRole), varargs...)
}

// GetRoleByName mocks base method.
func (m *MockRBACServiceClient) GetRoleByName(ctx context.Context, in *auth.GetRoleByNameRequest, opts ...grpc.CallOption) (*auth.GetRoleByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleByName", varargs...)
	ret0, _ := ret[0].(*auth.GetRoleByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName.
func (mr *MockRBACServiceClientMockRecorder) GetRoleByName(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockRBACServiceClient)(nil).GetRoleByName), varargs...)
}

// InternalCreateAuthorization mocks base method.
func (m *MockRBACServiceClient) InternalCreateAuthorization(ctx context.Context, in *auth.InternalCreateAuthorizationRequest, opts ...grpc.CallOption) (*auth.CreateAuthorizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalCreateAuthorization", varargs...)
	ret0, _ := ret[0].(*auth.CreateAuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalCreateAuthorization indicates an expected call of InternalCreateAuthorization.
func (mr *MockRBACServiceClientMockRecorder) InternalCreateAuthorization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalCreateAuthorization", reflect.TypeOf((*MockRBACServiceClient)(nil).InternalCreateAuthorization), varargs...)
}

// InternalGetAuthorizationsByUserId mocks base method.
func (m *MockRBACServiceClient) InternalGetAuthorizationsByUserId(ctx context.Context, in *auth.InternalGetAuthorizationsByUserIdRequest, opts ...grpc.CallOption) (*auth.ListAuthorizationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalGetAuthorizationsByUserId", varargs...)
	ret0, _ := ret[0].(*auth.ListAuthorizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalGetAuthorizationsByUserId indicates an expected call of InternalGetAuthorizationsByUserId.
func (mr *MockRBACServiceClientMockRecorder) InternalGetAuthorizationsByUserId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalGetAuthorizationsByUserId", reflect.TypeOf((*MockRBACServiceClient)(nil).InternalGetAuthorizationsByUserId), varargs...)
}

// InternalIsAuthorized mocks base method.
func (m *MockRBACServiceClient) InternalIsAuthorized(ctx context.Context, in *auth.InternalIsAuthorizedRequest, opts ...grpc.CallOption) (*auth.InternalIsAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalIsAuthorized", varargs...)
	ret0, _ := ret[0].(*auth.InternalIsAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalIsAuthorized indicates an expected call of InternalIsAuthorized.
func (mr *MockRBACServiceClientMockRecorder) InternalIsAuthorized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalIsAuthorized", reflect.TypeOf((*MockRBACServiceClient)(nil).InternalIsAuthorized), varargs...)
}

// IsAuthorized mocks base method.
func (m *MockRBACServiceClient) IsAuthorized(ctx context.Context, in *auth.IsAuthorizedRequest, opts ...grpc.CallOption) (*auth.IsAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAuthorized", varargs...)
	ret0, _ := ret[0].(*auth.IsAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockRBACServiceClientMockRecorder) IsAuthorized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockRBACServiceClient)(nil).IsAuthorized), varargs...)
}

// IsAuthorizedBulk mocks base method.
func (m *MockRBACServiceClient) IsAuthorizedBulk(ctx context.Context, in *auth.IsAuthorizedBulkRequest, opts ...grpc.CallOption) (*auth.IsAuthorizedBulkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAuthorizedBulk", varargs...)
	ret0, _ := ret[0].(*auth.IsAuthorizedBulkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorizedBulk indicates an expected call of IsAuthorizedBulk.
func (mr *MockRBACServiceClientMockRecorder) IsAuthorizedBulk(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorizedBulk", reflect.TypeOf((*MockRBACServiceClient)(nil).IsAuthorizedBulk), varargs...)
}

// IsOrgAdmin mocks base method.
func (m *MockRBACServiceClient) IsOrgAdmin(ctx context.Context, in *auth.IsOrgAdminRequest, opts ...grpc.CallOption) (*auth.IsOrgAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsOrgAdmin", varargs...)
	ret0, _ := ret[0].(*auth.IsOrgAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrgAdmin indicates an expected call of IsOrgAdmin.
func (mr *MockRBACServiceClientMockRecorder) IsOrgAdmin(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrgAdmin", reflect.TypeOf((*MockRBACServiceClient)(nil).IsOrgAdmin), varargs...)
}

// ListAuthorizations mocks base method.
func (m *MockRBACServiceClient) ListAuthorizations(ctx context.Context, in *auth.ListAuthorizationsRequest, opts ...grpc.CallOption) (*auth.ListAuthorizationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuthorizations", varargs...)
	ret0, _ := ret[0].(*auth.ListAuthorizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorizations indicates an expected call of ListAuthorizations.
func (mr *MockRBACServiceClientMockRecorder) ListAuthorizations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorizations", reflect.TypeOf((*MockRBACServiceClient)(nil).ListAuthorizations), varargs...)
}

// ListAvailablePermissions mocks base method.
func (m *MockRBACServiceClient) ListAvailablePermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*auth.ListAvailablePermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailablePermissions", varargs...)
	ret0, _ := ret[0].(*auth.ListAvailablePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailablePermissions indicates an expected call of ListAvailablePermissions.
func (mr *MockRBACServiceClientMockRecorder) ListAvailablePermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailablePermissions", reflect.TypeOf((*MockRBACServiceClient)(nil).ListAvailablePermissions), varargs...)
}

// ListPermissions mocks base method.
func (m *MockRBACServiceClient) ListPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*auth.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissions", varargs...)
	ret0, _ := ret[0].(*auth.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockRBACServiceClientMockRecorder) ListPermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockRBACServiceClient)(nil).ListPermissions), varargs...)
}

// ListRoles mocks base method.
func (m *MockRBACServiceClient) ListRoles(ctx context.Context, in *auth.ListRolesRequest, opts ...grpc.CallOption) (*auth.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoles", varargs...)
	ret0, _ := ret[0].(*auth.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockRBACServiceClientMockRecorder) ListRoles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockRBACServiceClient)(nil).ListRoles), varargs...)
}

// UpdateAuthorization mocks base method.
func (m *MockRBACServiceClient) UpdateAuthorization(ctx context.Context, in *auth.UpdateAuthorizationRequest, opts ...grpc.CallOption) (*auth.UpdateAuthorizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthorization", varargs...)
	ret0, _ := ret[0].(*auth.UpdateAuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorization indicates an expected call of UpdateAuthorization.
func (mr *MockRBACServiceClientMockRecorder) UpdateAuthorization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorization", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdateAuthorization), varargs...)
}

// UpdateAuthorizations mocks base method.
func (m *MockRBACServiceClient) UpdateAuthorizations(ctx context.Context, in *auth.UpdateAuthorizationsRequest, opts ...grpc.CallOption) (*auth.UpdateAuthorizationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthorizations", varargs...)
	ret0, _ := ret[0].(*auth.UpdateAuthorizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizations indicates an expected call of UpdateAuthorizations.
func (mr *MockRBACServiceClientMockRecorder) UpdateAuthorizations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizations", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdateAuthorizations), varargs...)
}

// UpdatePermission mocks base method.
func (m *MockRBACServiceClient) UpdatePermission(ctx context.Context, in *auth.UpdatePermissionRequest, opts ...grpc.CallOption) (*auth.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermission", varargs...)
	ret0, _ := ret[0].(*auth.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockRBACServiceClientMockRecorder) UpdatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdatePermission), varargs...)
}

// UpdateRole mocks base method.
func (m *MockRBACServiceClient) UpdateRole(ctx context.Context, in *auth.UpdateRoleRequest, opts ...grpc.CallOption) (*auth.UpdateRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(*auth.UpdateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRBACServiceClientMockRecorder) UpdateRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdateRole), varargs...)
}

// UpdateRoleV2 mocks base method.
func (m *MockRBACServiceClient) UpdateRoleV2(ctx context.Context, in *auth.UpdateRoleRequest, opts ...grpc.CallOption) (*auth.UpdateRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleV2", varargs...)
	ret0, _ := ret[0].(*auth.UpdateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleV2 indicates an expected call of UpdateRoleV2.
func (mr *MockRBACServiceClientMockRecorder) UpdateRoleV2(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleV2", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdateRoleV2), varargs...)
}