{
    "definition": {
        "id": "mttr-vulnerabilities-high-compare",
        "title": "MTTR - High",
        "sub_title": "Comparison",
        "breadCrumbTitle": "{{.orgName}}",
        "post_process_function_name": "mttr high component comparison",
        "column_details": {
            "column1": "Organization name",
            "column2": "Average duration"
        },
        "header_field": "valueInMillis",
        "compare_common_section_details": {
            "type": 2,
            "show_legends": false,
            "is_component_compare": true,
            "orientation": 0,
            "append_unit": " ",
            "tooltip_formatter": 1,
            "color_scheme": [
                {
                  "color0": "#FA6D71",
                  "color1": "#D52429"
                },
                {
                  "color0": "#FF8205",
                  "color1": "#FCC26C"
                },
                {
                  "color0": "#FDA512",
                  "color1": "#FDFF89"
                },
                {
                  "color0": "#9FB6C1",
                  "color1": "#577688"
                }
              ],
              "light_color_scheme": [
                {
                  "color0": "#FFB4B2",
                  "color1": "#EF302C"
                },
                {
                  "color0": "#FF8205",
                  "color1": "#FCC26C"
                },
                {
                  "color0": "#FEC513",
                  "color1": "#FFEC89"
                },
                {
                  "color0": "#759AB1",
                  "color1": "#B2CEE0"
                }
              ]              
        }    
    },
    "queries":{
        "mttrHighChart": {
            "alias": "scan_results",
            "query": {
                "size": 0,
                "query": {
                  "bool": {
                    "filter": [
                      {
                        "range": {
                          "scan_time": {
                            "gte": "{{.startDate}}",
                            "lte": "{{.endDate}}",
                            "format": "yyyy-MM-dd HH:mm:ss",
                            "time_zone": "{{.timeZone}}"
                          }
                        }
                      },
                      {
                        "term": {
                          "org_id": "{{.orgId}}"
                        }
                      },
                      {
                        "exists": {
                          "field": "date_of_discovery"
                        }
                      },
                      {
                        "terms": {
                          "severity": [
                            "HIGH"
                          ]
                        }
                      }
                    ]
                  }
                },
                "aggs": {
                  "mttr_component_comparison": {
                    "terms": {
                      "field": "component_id",
                      "size": 10000
                    },
                    "aggs": {
                      "Avg_TTR": {
                        "scripted_metric": {
                          "init_script": "state.timeSeriesMap = [:];",
                          "map_script": "def map = state.timeSeriesMap;def key =doc.org_id.value + '_' + doc.component_id.value + '_' + doc.github_branch.value + '_' + doc.code.value + '_' + doc.scanner_name.value + '_' + doc['timestamp'].getValue().toEpochSecond() * 1000;def v = ['timestamp':doc['timestamp'].getValue().toEpochSecond() * 1000, 'code':doc.code.value, 'bug_status':doc.bug_status.value, 'branch':doc.github_branch.value, 'severity':doc.severity.value, 'failure_count':doc.failure_count.value, 'org_id':doc.org_id.value, 'component_id':doc.component_id.value, 'date_of_discovery':doc.date_of_discovery.value, 'scan_time':doc.scan_time.value, 'TTR':0, 'scanner_name':doc.scanner_name.value];map.put(key, v);",
                          "combine_script": "return state.timeSeriesMap;",
                          "reduce_script": "def timeSeriesMap=new HashMap();def severityTTRmap=new HashMap();for(a in states){if(a!=null){for(i in a.keySet()){def record=a.get(i);def key=record.org_id+'_'+record.component_id+'_'+record.branch+'_'+record.code+'_'+record.scanner_name;if(timeSeriesMap.containsKey(key)){def lastRecord=timeSeriesMap.get(key);if(lastRecord.timestamp<record.timestamp){timeSeriesMap.put(key,record);}}else{timeSeriesMap.put(key,record);}}}}def vulnerabilities=timeSeriesMap.keySet();for(uniqueKey in vulnerabilities){def vul=timeSeriesMap.get(uniqueKey);if(vul.bug_status=='Resolved'){Instant startDate=Instant.ofEpochMilli(vul.date_of_discovery.getMillis());Instant endDate=Instant.ofEpochMilli(vul.scan_time.getMillis());def vulTTR=ChronoUnit.MILLIS.between(startDate,endDate);if(severityTTRmap.containsKey(vul.severity)){def TTRlist=severityTTRmap.get(vul.severity);TTRlist.add(vulTTR);severityTTRmap.put(vul.severity,TTRlist)}else{def TTRlist=new ArrayList();TTRlist.add(vulTTR);severityTTRmap.put(vul.severity,TTRlist)}}}def avgTTRMap=new LinkedHashMap();avgTTRMap.put('HIGH',0);for(uniqueSeverity in severityTTRmap.keySet()){def curTTRList=severityTTRmap.get(uniqueSeverity);OptionalDouble avgTTR=curTTRList.stream().mapToLong(Long::longValue).average();if(avgTTR.isPresent()){avgTTRMap.put(uniqueSeverity,Math.round(avgTTR.getAsDouble()))}}return avgTTRMap;"
                        }
                      }
                    }
                  }
                }
              }
        }
    }
  }