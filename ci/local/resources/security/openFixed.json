{
  "widget": {
    "id": "s4",
    "title": "Vulnerabilities overview",
    "description": "This widget displays found, fixed, and open vulnerabilities, summarizing the security status",
    "enable_components_compare": true,
    "components_compare_id": "vulnerabilities-overview-compare",
    "content": [
      {
        "header": [
          {
            "title": "Found",
            "post_process_function_name": "vulnerabilities overview",
            "spec_key": "foundVulHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesOverview",
              "report_type": "",
              "report_title": "Vulnerabilities overview"
            }
          },
          {
            "title": "Reopened",
            "post_process_function_name": "vulnerabilities overview",
            "spec_key": "reopenedVulHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesOverview",
              "report_type": "status",
              "report_title": "Vulnerabilities overview"
            }
          },
          {
            "title": "Resolved",
            "post_process_function_name": "vulnerabilities overview",
            "spec_key": "resolvedVulHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesOverview",
              "report_type": "status",
              "report_title": "Vulnerabilities overview"
            }
          },
          {
            "title": "Open",
            "post_process_function_name": "vulnerabilities overview",
            "spec_key": "openVulHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesOverview",
              "report_type": "status",
              "report_title": "Vulnerabilities overview"
            }
          }
        ],
        "section": [
          {
            "type": 3,
            "show_legends": true,
            "color_scheme": [
              {
                "color0": "#1D69FF",
                "color1": "#62B0FF"
              },
              {
                "color0": "#A23EB3",
                "color1": "#C774D6"
              },
              {
                "color0": "#D52429",
                "color1": "#FA6D71"
              },
              {
                "color0": "#0B7247",
                "color1": "#01CC75"
              }
            ],
            "light_color_scheme": [
              {
                "color0": "#36B2FA",
                "color1": "#0883D3"
              },
              {
                "color0": "#AC53F2",
                "color1": "#D48EFF"
              },
              {
                "color0": "#F29492",
                "color1": "#E73B37"
              },
              {
                "color0": "#0C9E61",
                "color1": "#78CAA8"
              }
            ],
            "post_process_function_name": "vulnerabilities overview",
            "spec_key": "vulOverviewChartSpec",
            "enable_post_transformation_processing": true,
            "drill_down": {
              "report_id": "vulnerabilitiesOverview",
              "report_type": "status",
              "report_title": "Vulnerabilities overview"
            }
          }
        ]
      }
    ]
  },
  "queries": {
    "vulnerabilityStatusCounts": {
      "alias": "scan_results",
      "query": {
        "size": 0,
        "_source": false,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone": "{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              }
            ]
          }
        },
        "aggs": {
          "vulnerabilityStatusCounts": {
            "scripted_metric": {
              "init_script": "state.statusMap = [:];",
              "map_script": "def map=state.statusMap;def key=doc.org_id.value+'_'+doc.component_id.value+ '_' +doc.github_branch.value +'_'+doc.code.value+'_'+doc.scanner_name.value+'_'+doc['timestamp'].getValue().toEpochSecond()*1000;def v=['org_id': doc.org_id.value, 'component_id': doc.component_id.value,'branch': doc.github_branch.value,'scanner_name': doc.scanner_name.value,'timestamp':doc['timestamp'].getValue().toEpochSecond()*1000,'code':doc.code.value,'bug_status':doc.bug_status.value,'name':doc.name.value, 'component_name':doc.component_name.value, 'severity':doc.severity.value];map.put(key,v);",
              "combine_script": "return state.statusMap;",
              "reduce_script": "def statusMap = new HashMap();def countMap = new HashMap();countMap.put('Open', 0);countMap.put('Reopened', 0);countMap.put('Resolved', 0);for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.code;if (statusMap.containsKey(key)){def vulDetailsMap = statusMap.get(key);def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;if (vulDetailsMap.containsKey(vulKey)){def lastRecord = vulDetailsMap.get(vulKey);if (lastRecord.timestamp < record.timestamp){vulDetailsMap.put(vulKey, record);}} else{vulDetailsMap.put(vulKey, record);}} else{def vulDetailsMap = new HashMap();def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;vulDetailsMap.put(vulKey, record);statusMap.put(key, vulDetailsMap);}}}}if (statusMap.size() > 0){for (uniqueKey in statusMap.keySet()){def vulMapBranchLevel = statusMap.get(uniqueKey);def isVulOpen = false;def isVulReopened = false;for (vulKey in vulMapBranchLevel.keySet()){def vul = vulMapBranchLevel.get(vulKey);if (vul.bug_status == 'Open'){isVulOpen = true;} else if (vul.bug_status == 'Reopened'){isVulOpen = true;isVulReopened = true;break;}}if (!isVulOpen){if(countMap.containsKey('Resolved')){def count = countMap.get('Resolved');countMap.put('Resolved', count+1);} else{countMap.put('Resolved', 1);}} else{if (isVulReopened){if(countMap.containsKey('Reopened')){def count = countMap.get('Reopened');countMap.put('Reopened', count+1);} else{countMap.put('Reopened', 1);}} else{if(countMap.containsKey('Open')){def count = countMap.get('Open');countMap.put('Open', count+1);} else{countMap.put('Open', 1);}}}}}def found = statusMap.size();countMap.put('Found',found);return countMap;"
            }
          }
        }
      }
    },
    "vulOverviewChart": {
      "alias": "scan_results",
      "query": {
        "size": 0,
        "_source": false,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone": "{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              }
            ]
          }
        },
        "aggs": {
          "vul_overview_buckets": {
            "date_histogram": {
              "field": "scan_time",
              "calendar_interval": "{{.aggrBy}}",
              "min_doc_count": 0,
              "format": "yyyy-MM-dd",
              "time_zone": "{{.timeZone}}",
              "extended_bounds": {
                "min": "{{.dateHistogramMin}}",
                "max": "{{.dateHistogramMax}}"
              }
            },
            "aggs": {
              "vul_overview_chart": {
                "scripted_metric": {
                  "init_script": "state.statusMap = [:];",
                  "map_script": "def map=state.statusMap;def key=doc.org_id.value+'_'+doc.component_id.value+ '_' +doc.github_branch.value +'_'+doc.code.value+'_'+doc.scanner_name.value+'_'+doc['timestamp'].getValue().toEpochSecond()*1000;def v=['org_id': doc.org_id.value, 'component_id': doc.component_id.value,'branch': doc.github_branch.value,'scanner_name': doc.scanner_name.value,'timestamp':doc['timestamp'].getValue().toEpochSecond()*1000,'code':doc.code.value,'bug_status':doc.bug_status.value,'name':doc.name.value, 'component_name':doc.component_name.value, 'severity':doc.severity.value];map.put(key,v);",
                  "combine_script": "return state.statusMap;",
                  "reduce_script": "def statusMap = new HashMap();def countMap = new HashMap();countMap.put('Open', 0);countMap.put('Reopened', 0);countMap.put('Resolved', 0);for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.code;if (statusMap.containsKey(key)){def vulDetailsMap = statusMap.get(key);def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;if (vulDetailsMap.containsKey(vulKey)){def lastRecord = vulDetailsMap.get(vulKey);if (lastRecord.timestamp < record.timestamp){vulDetailsMap.put(vulKey, record);}} else{vulDetailsMap.put(vulKey, record);}} else{def vulDetailsMap = new HashMap();def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;vulDetailsMap.put(vulKey, record);statusMap.put(key, vulDetailsMap);}}}}if (statusMap.size() > 0){for (uniqueKey in statusMap.keySet()){def vulMapBranchLevel = statusMap.get(uniqueKey);def isVulOpen = false;def isVulReopened = false;for (vulKey in vulMapBranchLevel.keySet()){def vul = vulMapBranchLevel.get(vulKey);if (vul.bug_status == 'Open'){isVulOpen = true;} else if (vul.bug_status == 'Reopened'){isVulOpen = true;isVulReopened = true;break;}}if (!isVulOpen){if(countMap.containsKey('Resolved')){def count = countMap.get('Resolved');countMap.put('Resolved', count+1);} else{countMap.put('Resolved', 1);}} else{if (isVulReopened){if(countMap.containsKey('Reopened')){def count = countMap.get('Reopened');countMap.put('Reopened', count+1);} else{countMap.put('Reopened', 1);}} else{if(countMap.containsKey('Open')){def count = countMap.get('Open');countMap.put('Open', count+1);} else{countMap.put('Open', 1);}}}}}def found = statusMap.size();countMap.put('Found',found);return countMap;"
                }
              }
            }
          }
        }
      }
    }
  }
}