{
  "widget": {
    "id": "s10",
    "title": "CWETM top 25 vulnerabilities",
    "description": "",
    "content": [
      {
        "header": [
          {
            "post_process_function_name":"CWETM Top 25 Vulnerabilities",
            "spec_key": "top25VulHeaderSpec"
          }
        ],
        "section": [
          {
            "type": 10,
            "drill_down": {
              "report_id": "cweTop25Vulnerabilities",
              "report_type": "vulnerabilityId",
              "report_title": "CWETM top 25 vulnerabilities"            
            },
            "post_process_function_name":"CWETM Top 25 Vulnerabilities",
            "spec_key": "top25VulChartSpec",
            "column_type": "cweTop25Vulnerabilities-widget",
            "show_pagination":false
          }
        ]
      }
    ]
  },
  "queries": {
    "top25Vul": {
      "alias": "scan_results",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "timestamp": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone":"{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              },
              {
                "terms": {
                  "code": [
                    "CWE-787",
                    "CWE-79",
                    "CWE-89",
                    "CWE-416",
                    "CWE-78",
                    "CWE-20",
                    "CWE-125",
                    "CWE-22",
                    "CWE-352",
                    "CWE-434",
                    "CWE-862",
                    "CWE-476",
                    "CWE-287",
                    "CWE-190",
                    "CWE-502",
                    "CWE-77",
                    "CWE-119",
                    "CWE-798",
                    "CWE-918",
                    "CWE-306",
                    "CWE-362",
                    "CWE-269",
                    "CWE-94",
                    "CWE-863",
                    "CWE-276"
                  ]
                }
              }
            ]
          }
        },
        "aggs": {
          "top25CWE": {
            "scripted_metric": {
              "init_script": "state.timeSeriesMap = [:];",
              "map_script": "def map=state.timeSeriesMap;def key=doc.org_id.value+'_'+doc.component_id.value+ '_' +doc.github_branch.value +'_'+doc.code.value+'_'+doc.scanner_name.value+'_'+doc['timestamp'].getValue().toEpochSecond()*1000;def v=['org_id': doc.org_id.value, 'component_id': doc.component_id.value,'branch': doc.github_branch.value,'scanner_name': doc.scanner_name.value,'timestamp':doc['timestamp'].getValue().toEpochSecond()*1000,'code':doc.code.value,'bug_status':doc.bug_status.value,'name':doc.name.value, 'component_name':doc.component_name.value];map.put(key,v);",
              "combine_script": "return state.timeSeriesMap;",
              "reduce_script": "def statusMap = new HashMap();def top25OpenMap = new HashMap();for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.code;if (statusMap.containsKey(key)){def vulDetailsMap = statusMap.get(key);def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;if(vulDetailsMap.containsKey(vulKey)){def lastRecord = vulDetailsMap.get(vulKey);if (lastRecord.timestamp < record.timestamp){vulDetailsMap.put(vulKey, record);}} else{vulDetailsMap.put(vulKey, record);}} else{def vulDetailsMap = new HashMap();def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;vulDetailsMap.put(vulKey, record);statusMap.put(key, vulDetailsMap);}}}}if (statusMap.size() > 0){for (uniqueKey in statusMap.keySet()){def vulMapBranchLevel = statusMap.get(uniqueKey);def uniqueComponents = new HashSet();for (vulKey in vulMapBranchLevel.keySet()){def vul = vulMapBranchLevel.get(vulKey);if (vul.bug_status == 'Open' || vul.bug_status == 'Reopened'){uniqueComponents.add(vul.component_name);if (top25OpenMap.containsKey(vul.code)){def tempMap = top25OpenMap.get(vul.code);tempMap.put('issuesFound', uniqueComponents.size());top25OpenMap.put(vul.code, tempMap);} else{def tempMap = new HashMap();tempMap.put('name', vul.name);tempMap.put('issuesFound', uniqueComponents.size());top25OpenMap.put(vul.code, tempMap);}}}}}return ['top25Table':top25OpenMap, 'top25TotalCount':top25OpenMap.size()];"
            }
          }
        }
      }
    }
  }
}
