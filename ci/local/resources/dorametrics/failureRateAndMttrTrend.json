{
    "widget": {
        "id": "d6",
        "title": "Failure rate & Mean time to recovery trend",
        "description": "This  illustrates the proportion of failed deployments and the average time for service recovery, highlighting areas for improving reliability and response.",
        "content": [
            {
                "section": [
                    {
                        "type": 12,
                        "show_legends": true,
                        "color_scheme": [
                            {
                                "color0": "#E19090",
                                "color1": "#DE3838",
                                "color2": "#F96B6F"
                            },
                            {
                                "color0": "#AC7B4F",
                                "color1": "#E2C1A3",
                                "color2": "#E3BC97"
                            }
                        ],
                        "light_color_scheme": [
                            {
                                "color0": "#FF9F9D",
                                "color1": "#DC4541",
                                "color2": "#E53935"
                            },
                            {
                                "color0": "#AC7B4F",
                                "color1": "#E2C1A3",
                                "color2": "#954A02"
                            }
                        ],
                        "post_process_function_name": "failure rate and mttr",
                        "spec_key": "failureRateAndMttrTrendSpec"
                    }
                ]
            }
        ]
    },
    "queries": {
        "failureRateAndMttrTrend": {
            "alias": "deploy_data",
            "query": {
                "size": 0,
                "query": {
                    "bool": {
                        "filter": [
                            {
                                "range": {
                                    "status_timestamp": {
                                        "gte": "{{.startDate}}",
                                        "lte": "{{.endDate}}",
                                        "format": "yyyy-MM-dd HH:mm:ss",
                                        "time_zone": "{{.timeZone}}"
                                    }
                                }
                            },
                            {
                                "term": {
                                    "org_id": "{{.orgId}}"
                                }
                            },
                            {
                                "term": {
                                    "data_type": 2
                                }
                            },
                            {
                                "term": {
                                    "target_env": "{{.targetEnv}}"
                                }
                            }
                        ]
                    }
                },
                "aggs": {
                    "deploy_buckets": {
                        "date_histogram": {
                            "field": "status_timestamp",
                            "calendar_interval": "{{.aggrBy}}",
                            "min_doc_count": 0,
                            "format": "yyyy-MM-dd",
                            "time_zone": "{{.timeZone}}",
                            "extended_bounds": {
                                "min": "{{.dateHistogramMin}}",
                                "max": "{{.dateHistogramMax}}"
                            }
                        },
                        "aggs": {
                            "deployments": {
                                "scripted_metric": {
                                    "combine_script": "return state.data_map;",
                                    "init_script": "state.data_map=[:];",
                                    "map_script": "def map = state.data_map, runStartTime = 0;def key = doc.component_id.value + '_' + doc.run_id.value + '_' + doc.job_id.value + '_' + doc.step_id.value + '_' + doc.target_env.value + '_' + doc.status.value;def v = ['run_id':doc.run_id.value, 'run_number':doc.run_number.value, 'job_id':doc.job_id.value, 'step_id':doc.step_id.value, 'target_env':doc.target_env.value, 'step_kind':doc.step_kind.value, 'status_timestamp':doc.status_timestamp.value, 'status':doc.status.value, 'component_id':doc.component_id.value, 'automation_id':doc.automation_id.value, 'workflow_name':doc.workflow_name.value, 'component_name':doc.component_name.value];if (doc['run_start_time'].size() != 0){runStartTime = doc.run_start_time.value}v['run_start_time'] = runStartTime;map.put(key, v);",
                                    "reduce_script": "def allDataMap = new HashMap(), componentMap = new HashMap(), resultMap = new HashMap(), jobStepDedupMap = new HashMap();for (response in states){if (response != null){for (key in response.keySet()){allDataMap.put(key, response.get(key));}}}for (key in allDataMap.keySet()){def currRecord = allDataMap.get(key);if (currRecord.step_id == ''){jobStepDedupMap.put(key, currRecord);} else{def jobLevelRecordKey = currRecord.component_id + '_' + currRecord.run_id + '_' + currRecord.job_id + '_' + '' + '_' + currRecord.target_env + '_' + currRecord.status;if (!allDataMap.containsKey(jobLevelRecordKey)){jobStepDedupMap.put(key, currRecord);}}}for (key in jobStepDedupMap.keySet()){def record = jobStepDedupMap.get(key);def compArray = new ArrayList();if (componentMap.containsKey(record.component_id)){compArray = componentMap.get(record.component_id);}compArray.add(record);componentMap.put(record.component_id, compArray)}def recoveredCount = 0.0, recoveredTotalDuration = 0.0, totalDeployments = 0.0, failedDeployments = 0.0;for (key in componentMap.keySet()){def componentArray = componentMap.get(key);for (def i = 0; i < componentArray.size(); i++){for (def j = i + 1; j < componentArray.size(); j++){if (componentArray[i].status_timestamp.getMillis() > componentArray[j].status_timestamp.getMillis()){def temp = componentArray[i];componentArray[i] = componentArray[j];componentArray[j] = temp;}}}def failedTime = 0, failedRunNumber = 0;for (def i = 0; i < componentArray.size(); i++){totalDeployments += 1;def status = componentArray[i].status, runNumber = componentArray[i].run_number;if (status == 'FAILED' || status == 'TIMED_OUT' || status == 'ABORTED'){if (failedTime == 0){failedTime = componentArray[i].status_timestamp.getMillis();failedRunNumber = runNumber;}failedDeployments += 1;}if (failedTime != 0 && status == 'SUCCEEDED' && failedRunNumber < runNumber){def successTime = componentArray[i].status_timestamp.getMillis();recoveredTotalDuration += (successTime - failedTime);recoveredCount += 1;failedTime = 0;failedRunNumber = 0;}}}def result = 0.0;if (recoveredCount != 0 || recoveredTotalDuration != 0){result = recoveredTotalDuration / recoveredCount}def failureRateResult = 0;if (totalDeployments != 0 || failedDeployments != 0){failureRateResult = Math.round((failedDeployments / totalDeployments * 100) * 100.0) / 100.0}resultMap.put('mttr', result);resultMap.put('total', totalDeployments);resultMap.put('failed', failedDeployments);resultMap.put('failureRate', failureRateResult);return resultMap;"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}