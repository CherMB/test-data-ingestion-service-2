{
    "widget": {
        "id": "cs2",
        "title": "Builds",
        "description": "",
        "content": [
            {
                "header": [
                    {
                        "title": "Total Builds",
                        "description": "",
                        "type": "",
                        "post_process_function_name": "component builds metric",
                        "spec_key": "header",
                        "drill_down": {
                            "report_id": "builds",
                            "report_type": "",
                            "report_title": "builds",
                            "report_info": null
                        }
                    },
                    {
                        "title": "",
                        "description": "",
                        "post_process_function_name": "component builds metric",
                        "spec_key": "subHeader",
                        "type": "subHeader",
                        "drill_down": null
                    }
                ],
                "section": [
                    {
                        "type": 5,
                        "show_legends": true,
                        "color_scheme": [
                            {
                                "color0": "#009C5B",
                                "color1": "#62CA9D"
                            },
                            {
                                "color0": "#D32227",
                                "color1": "#FB6E72"
                            }
                        ],
                        "column_type": null,
                        "post_process_function_name": "component builds metric",
                        "spec_key": "sectionChart",
                        "title": "",
                        "info": null,
                        "data_type": 0,
                        "category_type": "",
                        "orientation": 0,
                        "drill_down": null
                    }
                ],
                "footer": []
            }
        ],
        "pagination": false
    },
    "queries": {
        "buildsData": {
            "alias": "build_data",
            "query": {
                "_source": false,
                "size": 0,
                "query": {
                    "bool": {
                        "filter": [
                            {
                                "range": {
                                    "status_timestamp": {
                                        "gte": "{{.startDate}}",
                                        "lte": "{{.endDate}}",
                                        "format": "yyyy-MM-dd HH:mm:ss",
                                        "time_zone": "{{.timeZone}}"
                                    }
                                }
                            },
                            {
                                "term": {
                                    "org_id": "{{.orgId}}"
                                }
                            },
                            {
                                "term": {
                                    "step_kind": "build"
                                }
                            },
                            {
                                "term": {
                                  "data_type": 2
                              }
                            },
                            {
                                "bool": {
                                    "should": [
                                        {
                                            "term": {
                                                "status": "SUCCEEDED"
                                            }
                                        },
                                        {
                                            "term": {
                                                "status": "FAILED"
                                            }
                                        },
                                        {
                                            "term": {
                                                "status": "TIMED_OUT"
                                            }
                                        },
                                        {
                                            "term": {
                                                "status": "ABORTED"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "aggs": {
                    "build_status": {
                        "scripted_metric": {
                            "init_script": "state.data_map=[:];",
                            "map_script": "def map=state.data_map;def key=doc.run_id.value+'_'+doc.status.value+'_'+doc.step_id.value+'_'+doc.job_id.value+'_'+doc.component_id.value+'_'+doc._id.value;def v=['run_id':doc.run_id.value,'status':doc.status.value,'step_id':doc.step_id.value,'job_id':doc.job_id.value,'component_id':doc.component_id.value];map.put(key,v);",
                            "combine_script": "return state.data_map;",
                            "reduce_script": "def allDataMap=new HashMap();def tmpMap=[:],out=[:],resultMap=new HashMap(),countMap=new HashMap(),totalCount=0.0;for(response in states){if(response!=null){for(key in response.keySet()){def record=response.get(key);if(allDataMap.containsKey(key)){def mapRecord=allDataMap.get(key);allDataMap.put(key,record);}else{allDataMap.put(key,record);}}}}def jobLevelKeys=new HashSet();for(record in allDataMap.values()){if(record.step_id==''){def dedupKey=record.component_id+'_'+record.run_id+'_'+record.job_id;jobLevelKeys.add(dedupKey);}}def dedupKeys=new HashSet();for(entry in allDataMap.entrySet()){def record=entry.getValue();def dedupKey=record.component_id+'_'+record.run_id+'_'+record.job_id;def fullKey=entry.getKey();if(jobLevelKeys.contains(dedupKey)){if(record.step_id==''){tmpMap.put(fullKey,record);}}else{tmpMap.put(fullKey,record);}}for(key in tmpMap.keySet()){def mapRecord=tmpMap.get(key);def status=mapRecord.status;if(status=='SUCCEEDED'){status='Success';}else if(status=='FAILED'||status=='TIMED_OUT'||status=='ABORTED'){status='Failure';}if(countMap.containsKey(status)){def count=countMap.get(status);countMap.put(status,count+1);totalCount++;}else{countMap.put(status,1);totalCount++;}}def dataArray=[],infoArray=[],statusArray=['Success','Failure'];def drilldownMap=new HashMap();drilldownMap.put('reportId','component-summary-builds');drilldownMap.put('reportType','status');drilldownMap.put('reportTitle','Builds');for(key in statusArray){def count=0,percent=0;if(countMap.containsKey(key)){count=countMap.get(key);percent=Math.round((count/totalCount)*100);}def data=['name':key,'value':percent];dataArray.add(data);def info=['title':key,'value':count,'drillDown':drilldownMap];infoArray.add(info);}resultMap.put('total_builds',totalCount);resultMap.put('info',infoArray);return resultMap;"
                        }
                    }
                }
            }
        },
        "buildsDataChart": {
            "alias": "build_data",
            "query": {
                "_source": false,
                "size": 0,
                "query": {
                    "bool": {
                        "filter": [
                            {
                                "range": {
                                    "status_timestamp": {
                                        "gte": "{{.startDate}}",
                                        "lte": "{{.endDate}}",
                                        "format": "yyyy-MM-dd HH:mm:ss",
                                        "time_zone": "{{.timeZone}}"
                                    }
                                }
                            },
                            {
                                "term": {
                                    "org_id": "{{.orgId}}"
                                }
                            },
                            {
                                "term": {
                                    "step_kind": "build"
                                }
                            },
                            {
                                "term": {
                                  "data_type": 2
                              }
                            },
                            {
                                "bool": {
                                    "should": [
                                        {
                                            "term": {
                                                "status": "SUCCEEDED"
                                            }
                                        },
                                        {
                                            "term": {
                                                "status": "FAILED"
                                            }
                                        },
                                        {
                                            "term": {
                                                "status": "TIMED_OUT"
                                            }
                                        },
                                        {
                                            "term": {
                                                "status": "ABORTED"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "aggs": {
                    "runs_buckets": {
                        "date_histogram": {
                            "field": "status_timestamp",
                            "calendar_interval": "{{.aggrBy}}",
                            "min_doc_count": 0,
                            "format": "yyyy-MM-dd",
                            "extended_bounds": {
                                "min": "{{.dateHistogramMin}}",
                                "max": "{{.dateHistogramMax}}"
                            }
                        },
                        "aggs": {
                            "automation_run": {
                                "scripted_metric": {
                                    "init_script": "state.data_map=[:];",
                                    "map_script": "def map=state.data_map;def key=doc.component_id.value+'_'+doc.run_id.value+'_'+doc.job_id.value+'_'+doc.step_id.value+'_'+doc.status.value+'_'+doc._id.value;def v=['component_id':doc.component_id.value,'run_id':doc.run_id.value,'job_id':doc.job_id.value,'step_id':doc.step_id.value,'status':doc.status.value];map.put(key,v);",
                                    "combine_script": "return state.data_map;",
                                    "reduce_script": "def tmpMap=[:],allDataMap=[:],resultMap=new HashMap(),countMap=new HashMap(),totalCount=0.0;for(response in states){if(response!=null){for(key in response.keySet()){def record=response.get(key);allDataMap.put(key,record);}}}def jobLevelKeys=new HashSet();for(record in allDataMap.values()){if(record.step_id==''){def jobKey=record.component_id+'_'+record.run_id+'_'+record.job_id;jobLevelKeys.add(jobKey);}}for(key in allDataMap.keySet()){def record=allDataMap.get(key);def jobKey=record.component_id+'_'+record.run_id+'_'+record.job_id;if(record.step_id==''||!jobLevelKeys.contains(jobKey)){if(record.status=='SUCCEEDED'){record.status='Success';}else if(record.status=='FAILED'||record.status=='TIMED_OUT'||record.status=='ABORTED'){record.status='Failure';}tmpMap.put(key,record);}}for(key in tmpMap.keySet()){def mapRecord=tmpMap.get(key);if(countMap.containsKey(mapRecord.status)){countMap.put(mapRecord.status,countMap.get(mapRecord.status)+1);}else{countMap.put(mapRecord.status,1);}totalCount++;}def statusArray=['Success','Failure'];for(key in statusArray){def count=0;if(countMap.containsKey(key)){count=countMap.get(key);}resultMap.put(key,count);}return resultMap;"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}