{
  "widget": {
      "id": "cs10",
      "title": "Trivy Licenses Overview",
      "description": "",
      "content": [
          {
              
              "section": [
                  {
                      "type": 10,
                      "show_legends": false,
                      "column_type": "trivyLicensesOverview",
                      "show_pagination": true,
                      "data_type": 0,
                      "orientation": 0,
                      "post_process_function_name": "Trivy Licenses Overview Section"
                      
                  }
              ],
              "footer": []
          }
      ],
      "pagination": false
  },
  "queries": {
      "trivyLicensesOverviewSection": {
          "alias": "scan_results",
          "query": {
              "size": 0,
              "query": {
                  "bool": {
                    "filter": [
                      {
                        "range": {
                          "scan_time": {
                            "gte": "{{.startDate}}",
                            "lte": "{{.endDate}}",
                            "format": "yyyy-MM-dd HH:mm:ss",
                            "time_zone": "{{.timeZone}}"
                          }
                        }
                      },
                      {
                        "term": {
                          "org_id": "{{.orgId}}"
                        }
                      },
                      {
                        "term": {
                          "standard": "LICENSE"
                        }
                      },
                      {
                        "term": {
                          "scanner_name": "trivy"
                        }
                      },
                      {
                        "exists": {
                          "field": "date_of_discovery"
                        }
                      },
                      {
                        "exists": {
                          "field": "github_branch"
                        }
                      },
                      {
                        "exists": {
                          "field": "scanner_name"
                        }
                      },
                      {
                        "exists": {
                          "field": "code"
                        }
                      },
                      {
                        "terms": {
                          "severity": [
                            "MEDIUM",
                            "HIGH",
                            "LOW",
                            "VERY_HIGH"
                          ]
                        }
                      }
                    ]
                  }
                },
                "aggs": {
                  "trivyLicenseSection": {
                    "scripted_metric": {
                      "params": {
                        "timeZone": "{{.timeZone}}"
                      }, 
                      "init_script": "state.statusMap = [: ];",
                      "map_script": "def map = state.statusMap;def key = doc.org_id.value + '_' + doc.component_id.value + '_' + doc.github_branch.value + '_' + doc.code.value + '_' + doc.scanner_name.value + '_' + doc['timestamp'].getValue().toEpochSecond() * 1000;def v = ['timestamp':doc['timestamp'].getValue().toEpochSecond() * 1000, 'bug_status':doc.bug_status.value,'code':doc.code.value, 'branch':doc.github_branch.value,'severity':doc.severity.value, 'name':doc.name.value, 'component_name':doc.component_name.value, 'date_of_discovery':doc.date_of_discovery.value,'org_id':doc.org_id.value, 'component_id':doc.component_id.value, 'sla':'', 'scanner_name':doc.scanner_name.value, 'run_id':doc.run_id.value,'occurrences':params['_source']['failure_files'].size(),'license_type':doc.license_type.value,'classification':doc.classification.value];map.put(key, v);",
                      "combine_script": "return state.statusMap;",
                      "reduce_script": "def statusMap=new HashMap();def resultList=new ArrayList();def resultMap=new HashMap();for(a in states){if(a!=null){for(i in a.keySet()){def record=a.get(i);def key=record.org_id+'_'+record.component_id+'_'+record.code;if(statusMap.containsKey(key)){def lastRecord=statusMap.get(key);if(lastRecord.timestamp<record.timestamp){statusMap.put(key,record);}}else{statusMap.put(key,record);}}}}def licenseTypeMap=[:];DateTimeFormatter formatter=DateTimeFormatter.ofPattern('yyyy/MM/dd HH:mm:ss').withZone(ZoneId.of(params.timeZone));if(statusMap.size()>0){for(uniqueKey in statusMap.keySet()){def curLicense=statusMap.get(uniqueKey);if(curLicense.bug_status=='Open'||curLicense.bug_status=='Reopened'){def licenseTypeKey=curLicense.org_id+'_'+curLicense.component_id+'_'+curLicense.license_type;if(licenseTypeMap.containsKey(licenseTypeKey)){def licenseMetaData=licenseTypeMap.get(licenseTypeKey);def curLicenseDOD=curLicense.date_of_discovery.getMillis();def licenseDOD=licenseMetaData.date_of_discovery.getMillis();def cumulativeOccurrences=curLicense.occurrences+licenseMetaData.cumulative_occurrences;if(curLicenseDOD<licenseDOD){curLicense.put('cumulative_occurrences',cumulativeOccurrences);licenseTypeMap.put(licenseTypeKey,curLicense);}else{licenseMetaData.put('cumulative_occurrences',cumulativeOccurrences);licenseTypeMap.put(licenseTypeKey,licenseMetaData);}}else{curLicense.put('cumulative_occurrences',curLicense.occurrences);licenseTypeMap.put(licenseTypeKey,curLicense);}}}}if(licenseTypeMap.size()>0){for(licenseTypeKey in licenseTypeMap.keySet()){def curLicense=licenseTypeMap.get(licenseTypeKey);def severityCode=0;def curSeverity=curLicense.severity;if(curSeverity=='VERY_HIGH'){curLicense.severity='Very High';severityCode=4;}else if(curSeverity=='HIGH'){curLicense.severity='High';severityCode=3;}else if(curSeverity=='MEDIUM'){curLicense.severity='Medium';severityCode=2;}else if(curSeverity=='LOW'){curLicense.severity='Low';severityCode=1;}def map=[:];if(curLicense.bug_status!='Resolved'){def reportInfoMap=new HashMap();reportInfoMap.put('branch',curLicense.branch);reportInfoMap.put('run_id',curLicense.run_id);reportInfoMap.put('component_id',curLicense.component_id);reportInfoMap.put('license_type',curLicense.license_type);def drillDownInfoMap=new HashMap();drillDownInfoMap.put('reportId','trivy-license-occurence');drillDownInfoMap.put('reportTitle',curLicense.license_type);drillDownInfoMap.put('reportInfo',reportInfoMap);map.put('drillDown',drillDownInfoMap);}map.put('firstDiscovered',formatter.format(curLicense.date_of_discovery));map.put('classification',curLicense.classification);map.put('severity',curLicense.severity);map.put('severityCode',severityCode);map.put('licenseType',curLicense.license_type);map.put('occurrences',curLicense.cumulative_occurrences);resultList.add(map);}}return resultList;"
                    }
                  }
                }
          }
      }
  }
}