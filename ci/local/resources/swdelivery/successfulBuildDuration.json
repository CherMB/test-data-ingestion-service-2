{
  "widget": {
    "id": "e8",
    "title": "Successful build duration",
    "descripition": "Track the variation in successful build duration per component for the selected time frame.",
    "pagination": true,
    "content": [
      {
        "section": [
          {
            "type": 9,
            "show_legends": false,
            "orientation": 1,
            "color_scheme": [
              {
                "color0": "#CB6FE2",
                "color1": "#B305DF",
                "color2": "#F0CEFF"
              }
            ],
            "light_color_scheme": [
              {
                "color0": "#DE92F9",
                "color1": "#C74AEF",
                "color2": "#7B1FA2"
              }
            ],
            "post_process_function_name": "successful build duration",
            "spec_key": "successfulBuildDurationSpec",
            "drill_down": {
              "report_id": "successfulBuildsDuration",
              "report_title": "Successful builds duration",
              "report_type": "componentName"
            }
          }
        ]
      }
    ]
  },
  "queries": {
    "successfulBuildDuration": {
      "alias": "build_data",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "status_timestamp": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone":"{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "term": {
                  "status": "SUCCEEDED"
                }
              },
              {
                "term": {
                  "data_type": 2
                }
              }
            ]
          }
        },
        "aggs": {
          "builds": {
            "scripted_metric": {
              "init_script": "state.statusMap = [:];",
              "map_script": "def map = state.statusMap;def key = doc.component_id.value + '_' + doc.run_id.value + '_' + doc.job_id.value + '_' + doc.step_id.value + '_' + doc.status_timestamp.value;def v = ['component_name': doc.component_name.value, 'run_id': doc.run_id.value, 'job_id': doc.job_id.value, 'step_id': doc.step_id.value, 'step_kind': doc.step_kind.value, 'target_env': doc.target_env.value, 'status': doc.status.value, 'status_timestamp': doc.status_timestamp.value, 'start_time': doc.start_time.value, 'completed_time': doc.completed_time.value];map.put(key, v);",
              "combine_script": "return state.statusMap;",
              "reduce_script": "float getMedian(def input){def q2;def count=input.size();if(count%2==0){q2=(float)(input.get((count/2)-1)+input.get(count/2))/2;}else{q2=input.get(count/2);}return(float)q2;}def statusMap=new HashMap();def durationCountMap=new HashMap();def resultList=new ArrayList();def allDataMap=new HashMap();Instant Currentdate=Instant.ofEpochMilli(new Date().getTime());for(response in states){if(response!=null){for(key in response.keySet()){allDataMap.put(key,response.get(key));}}}for(key in allDataMap.keySet()){def currRecord=allDataMap.get(key);if(currRecord.step_id==''){statusMap.put(key,currRecord);}else{def jobLevelRecordKey=currRecord.component_id+'_'+currRecord.run_id+'_'+currRecord.job_id+'_'+''+'_'+currRecord.status_timestamp;if(!allDataMap.containsKey(jobLevelRecordKey)){statusMap.put(key,currRecord);}}}for(uniqueKey in statusMap.keySet()){def build=statusMap.get(uniqueKey);if(build.start_time!=0&&build.completed_time!=0){Instant startDate=Instant.ofEpochMilli(build.start_time);Instant completedDate=Instant.ofEpochMilli(build.completed_time);def duration=ChronoUnit.MILLIS.between(startDate,completedDate);if(durationCountMap.containsKey(build.component_name)){def durationList=durationCountMap.get(build.component_name);durationList.add(duration);durationCountMap.put(build.component_name,durationList);}else{def durationList=new ArrayList();durationList.add(duration);durationCountMap.put(build.component_name,durationList);}}}def boxPlotMap=new HashMap();for(uniqueComponent in durationCountMap.keySet()){def sortedValues=durationCountMap.get(uniqueComponent);Collections.sort(sortedValues);def firstHalf=new ArrayList();def secondHalf=new ArrayList();def q1,q2,q3,firstHalfToIndex,secondHalfFromIndex;int count=sortedValues.size();if(count<2){def tempMap=[sortedValues[0],sortedValues[0],sortedValues[0],sortedValues[0],sortedValues[0]];boxPlotMap.put(uniqueComponent,tempMap);}else{if(count%2==0){firstHalfToIndex=(count/2);secondHalfFromIndex=(count/2);}else{firstHalfToIndex=(count/2);secondHalfFromIndex=(count/2)+1;}q2=getMedian(sortedValues);firstHalf=sortedValues.subList(0,firstHalfToIndex);secondHalf=sortedValues.subList(secondHalfFromIndex,count);q1=getMedian(firstHalf);q3=getMedian(secondHalf);def iqr=q3-q1;def whiskerMin=q1-1.5*iqr;def whiskerMax=q3+1.5*iqr;for(val in sortedValues){if(val>=whiskerMin){whiskerMin=val;break;}}for(int i=sortedValues.size()-1;i>=0;i--){if(sortedValues.get(i)<=whiskerMax){whiskerMax=sortedValues.get(i);break;}}def tempMap=[whiskerMin,q1,q2,q3,whiskerMax];boxPlotMap.put(uniqueComponent,tempMap);}}return boxPlotMap;"
            }
          }
        }
      }
    }
  },
  "specs": {
    "successfulBuildDurationSpec": [
      {
        "operation": "shift",
        "spec": {
          "aggregations": {
            "builds": {
              "value": {
                "*": {
                  "$": "data[#2].x",
                  "@": "data[#2].y"
                }
              }
            }
          }
        }
      },
      {
        "operation": "default",
        "spec": {
          "data": []
        }
      },
      {
        "operation": "modify-default-beta",
        "spec": {
          "id": "Build Duration",
          "min": "{{.min}}",
          "max": "{{.max}}"
        }
      },
      {
        "operation": "shift",
        "spec": {
          "@": "[]"
        }
      }
    ]
  }
}