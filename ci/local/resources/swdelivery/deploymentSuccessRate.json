{
  "widget": {
    "id": "e9",
    "title": "Deployment overview",
    "descripition": "Track successful and unsuccessful deployments in each environment over time.",
    "enable_components_compare": false,
    "components_compare_id": "deployment-success-rate-compare",
    "pagination": true,
    "content": [
      {
        "header": [
          {
            "title": "Success rate - {{.environment}}",
            "post_process_function_name": "component deployments",
            "spec_key": "deploymentSuccessRateHeaderSpec"
          },
          {
            "type": "subHeader",
            "post_process_function_name": "component deployments",
            "spec_key": "deploymentSuccessRateSubHeaderSpec"
          }
        ],
        "section": [
          {
            "type": 5,
            "show_legends": true,
            "color_scheme": [
              {
                "color0": "#009C5B",
                "color1": "#62CA9D"
              },
              {
                "color0": "#D32227",
                "color1": "#FB6E72"
              }
            ],
            "light_color_scheme": [
              {
                "color0": "#0C9E61",
                "color1": "#78CAA8"
              },
              {
                "color0": "#E83D39",
                "color1": "#F39492"
              }
            ],
            "post_process_function_name": "component deployments",
            "spec_key": "deploymentDataSpec",
            "enable_post_transformation_processing": true,
            "drill_down": {
              "report_id": "deploymentOverview",
              "report_title": "Deployment overview",
              "report_type": "status",
              "report_info": {
                "deployment_env": "{{.environment}}"
              }
            }
          }
        ]
      }
    ]
  },
  "queries": {
    "deploymentSuccessRateHeader": {
      "alias": "deploy_data",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "status_timestamp": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone": "{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "term": {
                  "data_type": 2
                }
              }
            ]
          }
        },
        "aggs": {
          "deploy_data": {
            "scripted_metric": {
              "init_script": "state.data_map=[:];",
              "map_script": "def map = state.data_map;def key = doc.run_id.value + '_' + doc.job_id.value + '_' + doc.step_id.value + '_' + doc.target_env.value + '_' + doc.status.value;def v = ['run_id':doc.run_id.value, 'job_id':doc.job_id.value, 'step_id':doc.step_id.value, 'step_kind':doc.step_kind.value, 'target_env':doc.target_env.value, 'status':doc.status.value];map.put(key, v);",
              "combine_script": "return state.data_map;",
              "reduce_script": "def tmpMap = [:], out = [:], resultMap = new HashMap(), countMap = new HashMap(), totalCount = 0.0, jobStepDedupMap = new HashMap();for (response in states){if (response != null){for (key in response.keySet()){tmpMap.put(key, response.get(key));}}}for (key in tmpMap.keySet()){def currRecord = tmpMap.get(key);if (currRecord.step_id == ''){jobStepDedupMap.put(key, currRecord);} else{def jobLevelRecordKey = currRecord.run_id + '_' + currRecord.job_id + '_' + '' + '_' + currRecord.target_env + '_' + currRecord.status;if (!tmpMap.containsKey(jobLevelRecordKey)){jobStepDedupMap.put(key, currRecord);}}}for (key in jobStepDedupMap.keySet()){def mapRecord = jobStepDedupMap.get(key);def status = mapRecord.status;if (status == 'SUCCEEDED'){status = 'Success';} else if (status == 'FAILED' || status == 'TIMED_OUT' || status == 'ABORTED'){status = 'Failure';}if (countMap.containsKey(status)){def count = countMap.get(status);countMap.put(status, count + 1);totalCount++;} else{countMap.put(status, 1);totalCount++;}}def dataArray = [], infoArray = [], statusArray = ['Success', 'Failure'], percent = 0;for (key in statusArray){def count = 0;if (countMap.containsKey(key)){count = countMap.get(key);if (key == 'Success'){percent = Math.round((count / totalCount) * 100);}}def data = ['title':key, 'value':count];dataArray.add(data)}resultMap.put('data', dataArray);resultMap.put('total', totalCount);resultMap.put('value', '' + percent + '%');return resultMap;"
            }
          }
        }
      }
    },
    "deploymentData": {
      "alias": "deploy_data",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "status_timestamp": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone": "{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "term": {
                  "data_type": 2
                }
              }
            ]
          }
        },
        "aggs": {
          "deploy_buckets": {
            "date_histogram": {
              "field": "status_timestamp",
              "calendar_interval": "{{.aggrBy}}",
              "min_doc_count": 0,
              "format": "yyyy-MM-dd",
              "time_zone": "{{.timeZone}}",
              "extended_bounds": {
                "min": "{{.dateHistogramMin}}",
                "max": "{{.dateHistogramMax}}"
              }
            },
            "aggs": {
              "deploy_data": {
                "scripted_metric": {
                  "init_script": "state.data_map=[:];",
                  "map_script": "def map = state.data_map;def key = doc.run_id.value + '_' + doc.job_id.value + '_' + doc.step_id.value + '_' + doc.target_env.value + '_' + doc.status.value;def v = ['run_id':doc.run_id.value, 'job_id':doc.job_id.value, 'step_id':doc.step_id.value, 'step_kind':doc.step_kind.value, 'target_env':doc.target_env.value, 'status':doc.status.value];map.put(key, v);",
                  "combine_script": "return state.data_map;",
                  "reduce_script": "def tmpMap = [:], out = [:], resultMap = new HashMap(), countMap = new HashMap(), totalCount = 0.0, jobStepDedupMap = new HashMap();for (response in states){if (response != null){for (key in response.keySet()){def record = response.get(key);if (record.status == 'SUCCEEDED'){record.status = 'Success';} else if (record.status == 'FAILED' || record.status == 'TIMED_OUT' || record.status == 'ABORTED'){record.status = 'Failure';}tmpMap.put(key, record);}}}for (key in tmpMap.keySet()){def currRecord = tmpMap.get(key);if (currRecord.step_id == ''){jobStepDedupMap.put(key, currRecord);} else{def jobLevelRecordKey = currRecord.run_id + '_' + currRecord.job_id + '_' + '' + '_' + currRecord.target_env + '_' + currRecord.status;if (!tmpMap.containsKey(jobLevelRecordKey)){jobStepDedupMap.put(key, currRecord);}}}for (key in jobStepDedupMap.keySet()){def mapRecord = jobStepDedupMap.get(key);if (countMap.containsKey(mapRecord.status)){def count = countMap.get(mapRecord.status);countMap.put(mapRecord.status, count + 1);totalCount++;} else{countMap.put(mapRecord.status, 1);totalCount++;}}def statusArray = ['Success', 'Failure'];for (key in statusArray){def count = 0;if (countMap.containsKey(key)){count = countMap.get(key);}resultMap.put(key, count)}return resultMap;"
                }
              }
            }
          }
        }
      }
    }
  },
  "specs": {
    "deploymentSuccessRateHeaderSpec": [
      {
        "operation": "shift",
        "spec": {
          "aggregations": {
            "deploy_data": {
              "value": {
                "value": "value"
              }
            }
          }
        }
      }
    ],
    "deploymentSuccessRateSubHeaderSpec": [
      {
        "operation": "shift",
        "spec": {
          "aggregations": {
            "deploy_data": {
              "value": {
                "data": "subHeader"
              }
            }
          }
        }
      },
      {
        "operation": "modify-default-beta",
        "spec": {
          "subHeader": {
            "*": {
              "drillDown": {
                "reportId": "deploymentOverview",
                "reportTitle": "Deployment overview",
                "reportType": "status",
                "reportInfo": {
                  "deploymentEnv": "{{.environment}}"
                }
              }
            }
          }
        }
      }
    ],
    "deploymentDataSpec": [
      {
        "operation": "modify-default-beta",
        "spec": {
          "aggregations": {
            "deploy_buckets": {
              "buckets": {
                "*": {
                  "deploy_data": {
                    "value": {
                      "Success": 0,
                      "Failure": 0
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "operation": "shift",
        "spec": {
          "aggregations": {
            "deploy_buckets": {
              "buckets": {
                "*": {
                  "key_as_string": [
                    "success.data[&1].x",
                    "failure.data[&1].x"
                  ],
                  "deploy_data": {
                    "value": {
                      "Success": "success.data[&3].y",
                      "Failure": "failure.data[&3].y"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "operation": "modify-default-beta",
        "spec": {
          "success": {
            "id": "Success"
          },
          "failure": {
            "id": "Failure"
          }
        }
      },
      {
        "operation": "shift",
        "spec": {
          "success": {
            "id": "[#2].id",
            "data": "[#2].data"
          },
          "failure": {
            "id": "[#2].id",
            "data": "[#2].data"
          }
        }
      },
      {
        "operation": "modify-overwrite-beta",
        "spec": {
          "*": {
            "data": {
              "[0]": {
                "x": "{{.normalizeMonthInSpec}}"
              }
            }
          }
        }
      }
    ]
  }
}