{
  "widget": {
    "id": "s5",
    "title": "Open Vulnerabilities Overview",
    "descripition": "This widget provides an overview of the open vulnerabilities present in the system, classified by severity level",
    "enable_components_compare": true,
    "components_compare_id": "open-vulnerabilities-compare",
    "content": [
      {
        "header": [
          {
            "title": "Very high",
            "post_process_function_name": "open vulnerabilities overview",
            "spec_key": "veryHighSeverityHeaderSpec",
            "drill_down": {
              "report_id": "openVulnerabilities",
              "report_type": "severity",
              "report_title": "Open vulnerabilities"
            }
          },
          {
            "title": "High",
            "post_process_function_name": "open vulnerabilities overview",
            "spec_key": "highSeverityHeaderSpec",
            "drill_down": {
              "report_id": "openVulnerabilities",
              "report_type": "severity",
              "report_title": "Open vulnerabilities"
            }
          },
          {
            "title": "Medium",
            "post_process_function_name": "open vulnerabilities overview",
            "spec_key": "mediumSeverityHeaderSpec",
            "drill_down": {
              "report_id": "openVulnerabilities",
              "report_type": "severity",
              "report_title": "Open vulnerabilities"
            }
          },
          {
            "title": "Low",
            "post_process_function_name": "open vulnerabilities overview",
            "spec_key": "lowSeverityHeaderSpec",
            "drill_down": {
              "report_id": "openVulnerabilities",
              "report_type": "severity",
              "report_title": "Open vulnerabilities"
            }
          }
        ],
        "section": [
          {
            "type": 9,
            "category_type": "singleWithMultiColor",
            "title": "Mean age of open vulnerabilities occurrences, by severity",
            "show_legends": false,
            "color_scheme": [
              {
                "color0": "#FA6D71",
                "color1": "#D52429",
                "color2": "#FFC9CA"
              },
              {
                "color0": "#FF8205",
                "color1": "#FCC26C",
                "color2": "#FFF4D3"
              },
              {
                "color0": "#FDA512",
                "color1": "#FDFF89",
                "color2": "#FFF7C2"
              },
              {
                "color0": "#9FB6C1",
                "color1": "#577688",
                "color2": "#C6D4DB"
              }
            ],
            "light_color_scheme": [
              {
                "color0": "#FFB4B2",
                "color1": "#EF322E",
                "color2": "#9C181B"
              },
              {
                "color0": "#FF8205",
                "color1": "#FFDBA6",
                "color2": "#CC5C02"
              },
              {
                "color0": "#FEC513",
                "color1": "#FFED89",
                "color2": "#A35B05"
              },
              {
                "color0": "#759AB1",
                "color1": "#B2CEE0",
                "color2": "#394651"
              }
            ],
            "post_process_function_name": "open vulnerabilities overview",
            "spec_key": "openVulAgeChartSpec",
            "drill_down": {
              "report_id": "openVulnerabilities",
              "report_type": "severity",
              "report_title": "Open vulnerabilities"
            }
          }
        ]
      }
    ]
  },
  "queries": {
    "openVulSeverityCount": {
      "alias": "scan_results",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone":"{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              }
            ]
          }
        },
        "aggs": {
          "severityCounts": {
            "scripted_metric": {
              "init_script": "state.statusMap = [:];",
              "map_script": "def map=state.statusMap;def key=doc.org_id.value+'_'+doc.component_id.value+ '_' +doc.github_branch.value +'_'+doc.code.value+'_'+doc.scanner_name.value+'_'+doc['timestamp'].getValue().toEpochSecond()*1000;def v=['org_id': doc.org_id.value, 'component_id': doc.component_id.value,'branch': doc.github_branch.value,'scanner_name': doc.scanner_name.value,'timestamp':doc['timestamp'].getValue().toEpochSecond()*1000,'code':doc.code.value,'bug_status':doc.bug_status.value,'name':doc.name.value, 'severity':doc.severity.value];map.put(key,v);",
              "combine_script": "return state.statusMap;",
              "reduce_script": "def statusMap = new HashMap();def severityMap = new HashMap();severityMap.put('VERY_HIGH',0);severityMap.put('HIGH',0);severityMap.put('MEDIUM',0);severityMap.put('LOW',0);for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.code;if (statusMap.containsKey(key)){def vulDetailsMap = statusMap.get(key);def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;if (vulDetailsMap.containsKey(vulKey)){def lastRecord = vulDetailsMap.get(vulKey);if (lastRecord.timestamp < record.timestamp){vulDetailsMap.put(vulKey, record);}} else{vulDetailsMap.put(vulKey, record);}} else{def vulDetailsMap = new HashMap();def vulKey = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;vulDetailsMap.put(vulKey, record);statusMap.put(key, vulDetailsMap);}}}}if (statusMap.size() > 0){for (uniqueKey in statusMap.keySet()){def vulMapBranchLevel = statusMap.get(uniqueKey);for (vulKey in vulMapBranchLevel.keySet()){def vul = vulMapBranchLevel.get(vulKey);if (vul.bug_status == 'Open' || vul.bug_status == 'Reopened'){if (severityMap.containsKey(vul.severity)){def count = severityMap.get(vul.severity);severityMap.put(vul.severity, count + 1);break;} else{severityMap.put(vul.severity, 1);break;}}}}}return severityMap;"
            }
          }
        }
      }
    },
    "openVulAgeChart": {
      "alias": "scan_results",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone":"{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              }
            ]
          }
        },
        "aggs": {
          "ageCounts": {
            "scripted_metric": {
              "init_script": "state.statusMap = [:];",
              "map_script": "def map = state.statusMap;def key = doc.org_id.value + '_' + doc.component_id.value + '_' +doc.github_branch.value +'_'+ doc.code.value + '_' + doc.scanner_name.value + '_' + doc['timestamp'].getValue().toEpochSecond() * 1000;def v = ['timestamp':doc['timestamp'].getValue().toEpochSecond() * 1000, 'code':doc.code.value, 'bug_status':doc.bug_status.value,'branch':doc.github_branch.value, 'severity':doc.severity.value, 'org_id':doc.org_id.value,'component_id':doc.component_id.value,'date_of_discovery':doc.date_of_discovery.value];map.put(key, v);",
              "combine_script": "return state.statusMap;",
              "reduce_script": "float getMedian(def input){def q2;def count = input.size();if (count % 2 == 0){q2 = (float)(input.get((count / 2) - 1) + input.get(count / 2)) / 2;} else{q2 = input.get(count / 2);}return (float) q2}def statusMap = new HashMap();def ageCountMap = new HashMap();def resultList = new ArrayList();Instant Currentdate = Instant.ofEpochMilli(new Date().getTime());for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code;if (statusMap.containsKey(key)){def lastRecord = statusMap.get(key);if (lastRecord.timestamp < record.timestamp){statusMap.put(key, record);}} else{statusMap.put(key, record);}}}}def openVulnerabilities = statusMap.keySet();for (uniqueKey in openVulnerabilities){def vul = statusMap.get(uniqueKey);if (vul.bug_status == 'Open' || vul.bug_status == 'Reopened'){Instant Startdate = Instant.ofEpochMilli(vul.date_of_discovery.getMillis());def age = ChronoUnit.MILLIS.between(Startdate, Currentdate);if (ageCountMap.containsKey(vul.severity)){def ageList = ageCountMap.get(vul.severity);ageList.add(age);ageCountMap.put(vul.severity, ageList);} else{def ageList = new ArrayList();ageList.add(age);ageCountMap.put(vul.severity, ageList);}}}def boxPlotMap = new HashMap();boxPlotMap.put('VERY_HIGH', [0, 0, 0, 0, 0]);boxPlotMap.put('HIGH', [0, 0, 0, 0, 0]);boxPlotMap.put('MEDIUM', [0, 0, 0, 0, 0]);boxPlotMap.put('LOW', [0, 0, 0, 0, 0]);for (uniqueSeverity in ageCountMap.keySet()){def sortedValues = ageCountMap.get(uniqueSeverity);Collections.sort(sortedValues);def firstHalf = new ArrayList();def secondHalf = new ArrayList();def q1, q2, q3, firstHalfToIndex, secondHalfFromIndex;int count = sortedValues.size();if (count < 2){def tempMap = [sortedValues.get(0), sortedValues.get(0), sortedValues.get(0), sortedValues.get(0), sortedValues.get(0)];boxPlotMap.put(uniqueSeverity, tempMap);} else{if (count % 2 == 0){firstHalfToIndex = (count / 2);secondHalfFromIndex = (count / 2);} else{firstHalfToIndex = (count / 2);secondHalfFromIndex = (count / 2) + 1;}q2 = getMedian(sortedValues);firstHalf = sortedValues.subList(0, firstHalfToIndex);secondHalf = sortedValues.subList(secondHalfFromIndex, count);q1 = getMedian(firstHalf);q3 = getMedian(secondHalf);def iqr = q3 - q1;def whiskerMin = q1 - 1.5 * iqr;def whiskerMax = q3 + 1.5 * iqr;for (val in sortedValues){if (val >= whiskerMin){whiskerMin = val;break;}}for (int i = sortedValues.size() - 1; i >= 0; i--){if (sortedValues.get(i) <= whiskerMax){whiskerMax = sortedValues.get(i);break;}}def tempMap = [whiskerMin, q1, q2, q3, whiskerMax];boxPlotMap.put(uniqueSeverity, tempMap);}}def finalMap = new HashMap();def labelMap = new LinkedHashMap();labelMap.put('Very high','VERY_HIGH');labelMap.put('High','HIGH');labelMap.put('Medium','MEDIUM');labelMap.put('Low','LOW');for(uniqueSeverity in labelMap.keySet()){def tempMap = new HashMap();def curSeverity = labelMap.get(uniqueSeverity);tempMap.put('id', uniqueSeverity);tempMap.put('value', boxPlotMap.get(curSeverity));resultList.add(tempMap)}return resultList;"
            }
          }
        }
      }
    }
  }
}