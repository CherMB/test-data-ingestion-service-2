{
  "widget": {
    "id": "s7",
    "title": "Vulnerabilities by Scanner Type",
    "descripition": "This widget displays the distribution of detected vulnerabilities across various scanner types, illustrating their respective effectiveness",
    "content": [
      {
        "header": [
          {
            "enable_components_compare": true,
            "components_compare_id": "vulnerabilities-scanner-type-SAST-compare",
            "title": "SAST",
            "post_process_function_name": "vulnerabilities by scan type",
            "spec_key": "SASTHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesSecurityScanType",
              "report_type": "scanType",
              "report_title": "Vulnerabilities by security scan type"
            }
          },
          {
            "enable_components_compare": true,
            "components_compare_id": "vulnerabilities-scanner-type-DAST-compare",
            "title": "DAST",
            "post_process_function_name": "vulnerabilities by scan type",
            "spec_key": "DASTHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesSecurityScanType",
              "report_type": "scanType",
              "report_title": "Vulnerabilities by security scan type"
            }
          },
          {
            "enable_components_compare": true,
            "components_compare_id": "vulnerabilities-scanner-type-container-compare",
            "title": "Container",
            "post_process_function_name": "vulnerabilities by scan type",
            "spec_key": "ContainerHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesSecurityScanType",
              "report_type": "scanType",
              "report_title": "Vulnerabilities by security scan type"
            }
          },
          {
            "enable_components_compare": true,
            "components_compare_id": "vulnerabilities-scanner-type-SCA-compare",
            "title": "SCA",
            "post_process_function_name": "vulnerabilities by scan type",
            "spec_key": "SCAHeaderSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesSecurityScanType",
              "report_type": "scanType",
              "report_title": "Vulnerabilities by security scan type"
            }
          }
        ],
        "section": [
          {
            "type": 3,
            "show_legends": true,
            "color_scheme": [
              {
                "color0": "#FA6D71",
                "color1": "#D52429"
              },
              {
                "color0": "#FF8205",
                "color1": "#FCC26C"
              },
              {
                "color0": "#FDA512",
                "color1": "#FDFF89"
              },
              {
                "color0": "#9FB6C1",
                "color1": "#577688"
              }
            ],
            "light_color_scheme": [
              {
                "color0": "#FFB4B2",
                "color1": "#EF302C"
              },
              {
                "color0": "#FF8205",
                "color1": "#FCC26C"
              },
              {
                "color0": "#FEC513",
                "color1": "#FFEC89"
              },
              {
                "color0": "#759AB1",
                "color1": "#B2CEE0"
              }
            ],
            "post_process_function_name": "vulnerabilities by scan type",
            "spec_key": "vulnerabilitybyscannertypechartSpec",
            "drill_down": {
              "report_id": "vulnerabilitiesSecurityScanType",
              "report_type": "scanType",
              "report_title": "Vulnerabilities by security scan type"
            }
          }
        ]
      }
    ]
  },
  "queries": {
    "vulnerabilityByScannerTypeHeader": {
      "alias": "scan_results",
      "query": {
        "_source": false,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone":"{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              }
            ]
          }
        },
        "aggs": {
          "scanner_type_count": {
            "scripted_metric": {
              "init_script": "state.statusMap = [:];",
              "map_script": "def map = state.statusMap;def key = doc.org_id.value +'_' + doc.code.value + '_' + doc.scanner_type.value;def v = ['timestamp':doc['timestamp'].getValue().toEpochSecond() * 1000, 'code':doc.code.value, 'branch':doc.github_branch.value, 'scanner_type':doc.scanner_type.value, 'org_id':doc.org_id.value, 'component_id':doc.component_id.value, 'severity':doc.severity.value];map.put(key, v);",
              "combine_script": "return state.statusMap;",
              "reduce_script": "def statusMap = new HashMap();def countMap = new HashMap();countMap.put('SCA', 0);countMap.put('Container', 0);countMap.put('SAST', 0);countMap.put('DAST', 0);for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.code + '_' + record.scanner_type + '_' + record.severity;statusMap.put(key, record);}}}for (type in statusMap.keySet()){def countRecordType = statusMap.get(type).scanner_type;if (countMap.containsKey(countRecordType)){def count = countMap.get(countRecordType);countMap.put(countRecordType, count + 1);} else{countMap.put(countRecordType, 1);}}return countMap;"
            }
          }
        }
      }
    },
    "vulnerabilitybyscannertypechart": {
      "alias": "scan_results",
      "query": {
        "_source": false,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone":"{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              }
            ]
          }
        },
        "aggs": {
          "vulByScannerTypeCounts": {
            "scripted_metric": {
              "init_script": "state.statusMap = [:];",
              "map_script": "def map = state.statusMap;def key = doc.org_id.value + '_' + doc.code.value + '_' + doc.scanner_type.value + '_' + doc.severity.value;def v = ['timestamp':doc['timestamp'].getValue().toEpochSecond() * 1000, 'scannerType':(doc.scanner_type.value), 'severity':doc.severity.value, 'code':doc.code.value, 'branch':doc.github_branch.value, 'org_id':doc.org_id.value, 'component_id':doc.component_id.value];map.put(key, v);",
              "combine_script": "return state.statusMap;",
              "reduce_script": "int count = 0;def result = [:];def countMap = new HashMap();def scannerTypeCountMap = null;def resultMap = new HashMap();def statusMap = new HashMap();for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_'+ record.code + '_' + record.scannerType + '_' + record.severity;statusMap.put(key, record);}}}def item = statusMap.keySet();for (i in item){def record = statusMap.get(i);if (countMap.containsKey(record.severity)){scannerTypeCountMap = countMap.get(record.severity);if (scannerTypeCountMap.containsKey(record.scannerType)){count = scannerTypeCountMap.get(record.scannerType);count = count + 1;scannerTypeCountMap.put(record.scannerType, count);} else{scannerTypeCountMap.put(record.scannerType, 1);}countMap.put(record.severity, scannerTypeCountMap);} else{scannerTypeCountMap = new TreeMap();scannerTypeCountMap.put(record.scannerType, 1);countMap.put(record.severity, scannerTypeCountMap);}}def scannerTypeList = ['SAST', 'DAST','Container', 'SCA'];for (key in countMap.keySet()){def scannerTypeMap = countMap.get(key);def countList = new ArrayList();for (typeKey in scannerTypeList){def count1 = scannerTypeMap.containsKey(typeKey) ? scannerTypeMap.get(typeKey):0;def record = ['x':typeKey, 'y':count1];countList.add(record);}resultMap.put(key, countList)}return resultMap;"
            }
          }
        }
      }
    }
  }
}