{
  "widget": {
    "id": "s9",
    "title": "MTTR for vulnerabilities",
    "descripition": "",
    "content": [
      {
        "header": [
          {
            "enable_components_compare": true,
            "components_compare_id": "mttr-vulnerabilities-very-high-compare",
            "title": "Very high",
            "post_process_function_name": "mttr for vulnerabilities",
            "spec_key": "MTTRHeaderSpecVeryHigh",
            "drill_down": {
              "report_id": "mttrForVulnerabilities",
              "report_type": "severity",
              "report_title": "MTTR for vulnerabilities"
            }
          },
          {
            "enable_components_compare": true,
            "components_compare_id": "mttr-vulnerabilities-high-compare",
            "title": "High",
            "post_process_function_name": "mttr for vulnerabilities",
            "spec_key": "MTTRHeaderSpecHigh",
            "drill_down": {
              "report_id": "mttrForVulnerabilities",
              "report_type": "severity",
              "report_title": "MTTR for vulnerabilities"
            }
          },
          {
            "enable_components_compare": true,
            "components_compare_id": "mttr-vulnerabilities-medium-compare",
            "title": "Medium",
            "post_process_function_name": "mttr for vulnerabilities",
            "spec_key": "MTTRHeaderSpecMedium",
            "drill_down": {
              "report_id": "mttrForVulnerabilities",
              "report_type": "severity",
              "report_title": "MTTR for vulnerabilities"
            }
          },
          {
            "enable_components_compare": true,
            "components_compare_id": "mttr-vulnerabilities-low-compare",
            "title": "Low",
            "post_process_function_name": "mttr for vulnerabilities",
            "spec_key": "MTTRHeaderSpecLow",
            "drill_down": {
              "report_id": "mttrForVulnerabilities",
              "report_type": "severity",
              "report_title": "MTTR for vulnerabilities"
            }
          }
        ],
        "section": [
          {
            "type": 3,
            "show_legends": true,
            "color_scheme": [
              {
                "color0": "#FA6D71",
                "color1": "#D52429"
              },
              {
                "color0": "#FF8205",
                "color1": "#FCC26C"
              },
              {
                "color0": "#FDA512",
                "color1": "#FDFF89"
              },
              {
                "color0": "#9FB6C1",
                "color1": "#577688"
              }
            ],
            "light_color_scheme": [
              {
                "color0": "#FFB4B2",
                "color1": "#EF302C"
              },
              {
                "color0": "#FF8205",
                "color1": "#FCC26C"
              },
              {
                "color0": "#FEC513",
                "color1": "#FFEC89"
              },
              {
                "color0": "#759AB1",
                "color1": "#B2CEE0"
              }
            ],
            "post_process_function_name": "mttr for vulnerabilities",
            "spec_key": "MTTRChartSpec",
            "enable_post_transformation_processing": true,
            "drill_down": {
              "report_id": "mttrForVulnerabilities",
              "report_type": "severity",
              "report_title": "MTTR for vulnerabilities"
            }
          }
        ]
      }
    ]
  },
  "queries": {
    "MTTRHeaders": {
      "alias": "scan_results",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone": "{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              }
            ]
          }
        },
        "aggs": {
          "Avg_TTR": {
            "scripted_metric": {
              "init_script": "state.timeSeriesMap = [:];",
              "map_script": "def map = state.timeSeriesMap;def key =doc.org_id.value + '_' + doc.component_id.value + '_' + doc.github_branch.value + '_' + doc.code.value + '_' + doc.scanner_name.value + '_' + doc['timestamp'].getValue().toEpochSecond() * 1000;def v = ['timestamp':doc['timestamp'].getValue().toEpochSecond() * 1000, 'code':doc.code.value, 'bug_status':doc.bug_status.value, 'branch':doc.github_branch.value, 'severity':doc.severity.value, 'org_id':doc.org_id.value, 'component_id':doc.component_id.value, 'date_of_discovery':doc.date_of_discovery.value, 'scan_time':doc.scan_time.value, 'TTR':0, 'scanner_name':doc.scanner_name.value];map.put(key, v);",
              "combine_script": "return state.timeSeriesMap;",
              "reduce_script": "def timeSeriesMap = new HashMap();def severityTTRmap = new HashMap();severityTTRmap.put('VERY_HIGH',new ArrayList());severityTTRmap.put('HIGH',new ArrayList());severityTTRmap.put('MEDIUM',new ArrayList());severityTTRmap.put('LOW',new ArrayList());def avgTTRMap = new HashMap();avgTTRMap.put('VERY_HIGH',0);avgTTRMap.put('HIGH',0);avgTTRMap.put('MEDIUM',0);avgTTRMap.put('LOW',0);for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;if (timeSeriesMap.containsKey(key)){def lastRecord = timeSeriesMap.get(key);if (lastRecord.timestamp < record.timestamp){timeSeriesMap.put(key, record);}} else{timeSeriesMap.put(key, record);}}}}def vulnerabilities = timeSeriesMap.keySet();for (uniqueKey in vulnerabilities){def vul = timeSeriesMap.get(uniqueKey);if (vul.bug_status == 'Resolved' && vul.date_of_discovery.getMillis() > 0){Instant startDate = Instant.ofEpochMilli(vul.date_of_discovery.getMillis());Instant endDate = Instant.ofEpochMilli(vul.scan_time.getMillis());def vulTTR = ChronoUnit.HOURS.between(startDate, endDate);if (severityTTRmap.containsKey(vul.severity)){def TTRlist = severityTTRmap.get(vul.severity);TTRlist.add(vulTTR);severityTTRmap.put(vul.severity, TTRlist)} else{def TTRlist = new ArrayList();TTRlist.add(vulTTR);severityTTRmap.put(vul.severity, TTRlist)}}}for (uniqueSeverity in severityTTRmap.keySet()){def curTTRList = severityTTRmap.get(uniqueSeverity);def resolvedCount = curTTRList.size();avgTTRMap.put(uniqueSeverity + '_RESOLVED_COUNT', resolvedCount);if (resolvedCount > 0){OptionalDouble avgTTR = curTTRList.stream().mapToLong(Long::longValue).average();if (avgTTR.isPresent()){def averageInHours = avgTTR.getAsDouble();def days = (int) averageInHours/24;def hours = (int) averageInHours % 24;def header = days + 'd ' + hours + 'h';avgTTRMap.put(uniqueSeverity,header)}} else{avgTTRMap.put(uniqueSeverity,'-')}}return avgTTRMap;"
            }
          }
        }
      }
    },
    "MTTRChart": {
      "alias": "scan_results",
      "query": {
        "size": 0,
        "query": {
          "bool": {
            "filter": [
              {
                "range": {
                  "scan_time": {
                    "gte": "{{.startDate}}",
                    "lte": "{{.endDate}}",
                    "format": "yyyy-MM-dd HH:mm:ss",
                    "time_zone": "{{.timeZone}}"
                  }
                }
              },
              {
                "term": {
                  "org_id": "{{.orgId}}"
                }
              },
              {
                "exists": {
                  "field": "date_of_discovery"
                }
              },
              {
                "terms": {
                  "severity": [
                    "MEDIUM",
                    "HIGH",
                    "LOW",
                    "VERY_HIGH"
                  ]
                }
              }
            ]
          }
        },
        "aggs": {
          "MTTR_chart_date_buckets": {
            "date_histogram": {
              "field": "scan_time",
              "calendar_interval": "{{.aggrBy}}",
              "min_doc_count": 0,
              "format": "yyyy-MM-dd",
              "time_zone": "{{.timeZone}}",
              "extended_bounds": {
                "min": "{{.dateHistogramMin}}",
                "max": "{{.dateHistogramMax}}"
              },
              "order": {
                "_key": "asc"
              }
            },
            "aggs": {
              "Avg_TTR": {
                "scripted_metric": {
                  "init_script": "state.timeSeriesMap = [:];",
                  "map_script": "def map = state.timeSeriesMap;def key =doc.org_id.value + '_' + doc.component_id.value + '_' + doc.github_branch.value + '_' + doc.code.value + '_' + doc.scanner_name.value + '_' + doc['timestamp'].getValue().toEpochSecond() * 1000;def v = ['timestamp':doc['timestamp'].getValue().toEpochSecond() * 1000, 'code':doc.code.value, 'bug_status':doc.bug_status.value, 'branch':doc.github_branch.value, 'severity':doc.severity.value, 'org_id':doc.org_id.value, 'component_id':doc.component_id.value, 'date_of_discovery':doc.date_of_discovery.value, 'scan_time':doc.scan_time.value, 'TTR':0, 'scanner_name':doc.scanner_name.value];map.put(key, v);",
                  "combine_script": "return state.timeSeriesMap;",
                  "reduce_script": "def timeSeriesMap = new HashMap();def severityTTRmap = new HashMap();for (a in states){if (a != null){for (i in a.keySet()){def record = a.get(i);def key = record.org_id + '_' + record.component_id + '_' + record.branch + '_' + record.code + '_' + record.scanner_name;if (timeSeriesMap.containsKey(key)){def lastRecord = timeSeriesMap.get(key);if (lastRecord.timestamp < record.timestamp){timeSeriesMap.put(key, record);}} else{timeSeriesMap.put(key, record);}}}}def vulnerabilities = timeSeriesMap.keySet();for (uniqueKey in vulnerabilities){def vul = timeSeriesMap.get(uniqueKey);if (vul.bug_status == 'Resolved' && vul.date_of_discovery.getMillis() > 0){Instant startDate = Instant.ofEpochMilli(vul.date_of_discovery.getMillis());Instant endDate = Instant.ofEpochMilli(vul.scan_time.getMillis());def vulTTR = ChronoUnit.MILLIS.between(startDate, endDate);if (severityTTRmap.containsKey(vul.severity)){def TTRlist = severityTTRmap.get(vul.severity);TTRlist.add(vulTTR);severityTTRmap.put(vul.severity, TTRlist)} else{def TTRlist = new ArrayList();TTRlist.add(vulTTR);severityTTRmap.put(vul.severity, TTRlist)}}}def avgTTRMap = new LinkedHashMap();avgTTRMap.put('VERY_HIGH',0);avgTTRMap.put('HIGH',0);avgTTRMap.put('MEDIUM',0);avgTTRMap.put('LOW',0);for (uniqueSeverity in severityTTRmap.keySet()){def curTTRList = severityTTRmap.get(uniqueSeverity);OptionalDouble avgTTR = curTTRList.stream().mapToLong(Long::longValue).average();if (avgTTR.isPresent()){avgTTRMap.put(uniqueSeverity,Math.round(avgTTR.getAsDouble()))}}return avgTTRMap;"
                }
              }
            }
          }
        }
      }
    }
  }
}