{
    "widget": {
        "id": "e11",
        "title": "Average deployment time",
        "descripition": "Track the average time to deploy for the selected duration across environments.",
        "content": [
            {
                "section": [
                    {
                        "type": 11,
                        "show_legends": true,
                        "color_scheme": [
                            {
                                "color0": "#4696E5",
                                "color1": "#0963BD"
                            }
                        ],
                        "light_color_scheme": [
                            {
                                "color0": "#37B2FA",
                                "color1": "#017BCD"
                            }
                        ],
                        "post_process_function_name": "average deployment time",
                        "spec_key": "averageDeploymentTimeSpec"
                    }
                ]
            }
        ]
    },
    "queries": {
        "averageDeploymentTime": {
            "alias": "deploy_data",
            "query": {
                "size": 0,
                "query": {
                    "bool": {
                        "filter": [
                            {
                                "range": {
                                    "status_timestamp": {
                                        "gte": "{{.startDate}}",
                                        "lte": "{{.endDate}}",
                                        "format": "yyyy-MM-dd HH:mm:ss",
                                        "time_zone": "{{.timeZone}}"
                                    }
                                }
                            },
                            {
                                "term": {
                                    "org_id": "{{.orgId}}"
                                }
                            },
                            {
                                "term": {
                                    "data_type": 2
                                }
                            },
                            {
                                "bool": {
                                    "should": [
                                        {
                                            "term": {
                                                "status": "SUCCEEDED"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "bool": {
                                    "must_not": [
                                        {
                                            "term": {
                                                "target_env": ""
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "aggs": {
                    "deploy_data": {
                        "scripted_metric": {
                            "init_script": "state.data_map=[:];",
                            "map_script": "def map = state.data_map;def key = doc.run_id.value + '_' + doc.job_id.value + '_' + doc.step_id.value + '_' + doc.target_env.value + '_' + doc.status.value;def v = ['run_id':doc.run_id.value, 'job_id':doc.job_id.value, 'step_id':doc.step_id.value, 'target_env':doc.target_env.value, 'step_kind':doc.step_kind.value, 'start_time':doc.start_time.value, 'completed_time':doc.completed_time.value, 'status_timestamp':doc.status_timestamp.value, 'status':doc.status.value];if (doc['run_start_time'].size() != 0){v['run_start_time'] = doc.run_start_time.value}map.put(key, v);",
                            "combine_script": "return state.data_map;",
                            "reduce_script": "def allDataMap = new HashMap(), toTestMap = new HashMap(), tmpMap = [:], resultMap = new HashMap(), jobStepDedupMap = new HashMap(), resultArray = [];for (response in states){if (response != null){for (key in response.keySet()){allDataMap.put(key, response.get(key));}}}for (key in allDataMap.keySet()){def currRecord = allDataMap.get(key);if (currRecord.step_id == ''){jobStepDedupMap.put(key, currRecord);} else{def jobLevelRecordKey = currRecord.run_id + '_' + currRecord.job_id + '_' + '' + '_' + currRecord.target_env + '_' + currRecord.status;if (!allDataMap.containsKey(jobLevelRecordKey)){jobStepDedupMap.put(key, currRecord);}}}for (key in jobStepDedupMap.keySet()){def record = jobStepDedupMap.get(key);if (tmpMap.containsKey(record.run_id)){def recordArray = tmpMap.get(record.run_id);recordArray.add(record);tmpMap.put(record.run_id, recordArray);} else{def recordArray = new ArrayList();recordArray.add(record);tmpMap.put(record.run_id, recordArray);}}for (key in tmpMap.keySet()){def records = tmpMap.get(key);def sortedRecords = records.stream().distinct().sorted((o1, o2) -> o1.status_timestamp.getMillis().compareTo(o2.status_timestamp.getMillis())).collect(Collectors.toList());def from = 'PR', startTime = 0;for (def index = 0; index < sortedRecords.size(); index++){def record = sortedRecords[index];def info = new HashMap();def keyString = from + '-' + record.target_env;if (index == 0){if (record.run_start_time == null){startTime = record.start_time;} else{startTime = record.run_start_time;}}if (startTime != 0 && record.completed_time != 0){def duration = record.completed_time - startTime;def value = ['from':from, 'to':record.target_env, 'startTime':startTime, 'endTime':record.completed_time, 'duration':duration];info['key'] = keyString;info['value'] = value;if (resultMap.containsKey(keyString)){def data = resultMap.get(keyString);data['value'] += duration;data['count'] += 1;} else{def data = new HashMap();data['value'] = duration;data['count'] = 1;data['from'] = from;data['to'] = record.target_env;if (data['from'] != data['to']){resultMap.put(keyString, data);}}startTime = record.completed_time;from = record.target_env;if (toTestMap.containsKey(key)){toTestMap[key].add(info);} else{toTestMap[key] = new ArrayList();toTestMap[key].add(info);}}}}for (resultKey in resultMap.keySet()){def result = resultMap.get(resultKey);result['average'] = result['value'] / result['count'];resultArray.add(result)}return resultArray;"
                        }
                    }
                }
            }
        }
    }
}