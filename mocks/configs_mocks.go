// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calculi-corp/config (interfaces: Configuration)

// Package mocks is a generated GoMock package.
package mocks

import (
	config "github.com/calculi-corp/config"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockConfiguration is a mock of Configuration interface
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockConfiguration) Clone(arg0 string) config.Configuration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0)
	ret0, _ := ret[0].(config.Configuration)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockConfigurationMockRecorder) Clone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockConfiguration)(nil).Clone), arg0)
}

// Debug mocks base method
func (m *MockConfiguration) Debug() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug")
}

// Debug indicates an expected call of Debug
func (mr *MockConfigurationMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockConfiguration)(nil).Debug))
}

// DefineBoolFlag mocks base method
func (m *MockConfiguration) DefineBoolFlag(arg0 string, arg1 bool, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineBoolFlag", arg0, arg1, arg2)
}

// DefineBoolFlag indicates an expected call of DefineBoolFlag
func (mr *MockConfigurationMockRecorder) DefineBoolFlag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineBoolFlag", reflect.TypeOf((*MockConfiguration)(nil).DefineBoolFlag), arg0, arg1, arg2)
}

// DefineDurationFlag mocks base method
func (m *MockConfiguration) DefineDurationFlag(arg0 string, arg1 time.Duration, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineDurationFlag", arg0, arg1, arg2)
}

// DefineDurationFlag indicates an expected call of DefineDurationFlag
func (mr *MockConfigurationMockRecorder) DefineDurationFlag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineDurationFlag", reflect.TypeOf((*MockConfiguration)(nil).DefineDurationFlag), arg0, arg1, arg2)
}

// DefineFloat64Flag mocks base method
func (m *MockConfiguration) DefineFloat64Flag(arg0 string, arg1 float64, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineFloat64Flag", arg0, arg1, arg2)
}

// DefineFloat64Flag indicates an expected call of DefineFloat64Flag
func (mr *MockConfigurationMockRecorder) DefineFloat64Flag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineFloat64Flag", reflect.TypeOf((*MockConfiguration)(nil).DefineFloat64Flag), arg0, arg1, arg2)
}

// DefineInt64Flag mocks base method
func (m *MockConfiguration) DefineInt64Flag(arg0 string, arg1 int64, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineInt64Flag", arg0, arg1, arg2)
}

// DefineInt64Flag indicates an expected call of DefineInt64Flag
func (mr *MockConfigurationMockRecorder) DefineInt64Flag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineInt64Flag", reflect.TypeOf((*MockConfiguration)(nil).DefineInt64Flag), arg0, arg1, arg2)
}

// DefineIntFlag mocks base method
func (m *MockConfiguration) DefineIntFlag(arg0 string, arg1 int, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineIntFlag", arg0, arg1, arg2)
}

// DefineIntFlag indicates an expected call of DefineIntFlag
func (mr *MockConfigurationMockRecorder) DefineIntFlag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineIntFlag", reflect.TypeOf((*MockConfiguration)(nil).DefineIntFlag), arg0, arg1, arg2)
}

// DefineMapFlag mocks base method
func (m *MockConfiguration) DefineMapFlag(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineMapFlag", arg0, arg1, arg2)
}

// DefineMapFlag indicates an expected call of DefineMapFlag
func (mr *MockConfigurationMockRecorder) DefineMapFlag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineMapFlag", reflect.TypeOf((*MockConfiguration)(nil).DefineMapFlag), arg0, arg1, arg2)
}

// DefineNumSliceFlag mocks base method
func (m *MockConfiguration) DefineNumSliceFlag(arg0 string, arg1 config.NumSlice, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineNumSliceFlag", arg0, arg1, arg2)
}

// DefineNumSliceFlag indicates an expected call of DefineNumSliceFlag
func (mr *MockConfigurationMockRecorder) DefineNumSliceFlag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineNumSliceFlag", reflect.TypeOf((*MockConfiguration)(nil).DefineNumSliceFlag), arg0, arg1, arg2)
}

// DefineStringFlag mocks base method
func (m *MockConfiguration) DefineStringFlag(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineStringFlag", arg0, arg1, arg2)
}

// DefineStringFlag indicates an expected call of DefineStringFlag
func (mr *MockConfigurationMockRecorder) DefineStringFlag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineStringFlag", reflect.TypeOf((*MockConfiguration)(nil).DefineStringFlag), arg0, arg1, arg2)
}

// DefineStringSliceFlag mocks base method
func (m *MockConfiguration) DefineStringSliceFlag(arg0 string, arg1 []string, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineStringSliceFlag", arg0, arg1, arg2)
}

// DefineStringSliceFlag indicates an expected call of DefineStringSliceFlag
func (mr *MockConfigurationMockRecorder) DefineStringSliceFlag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineStringSliceFlag", reflect.TypeOf((*MockConfiguration)(nil).DefineStringSliceFlag), arg0, arg1, arg2)
}

// DumpConfig mocks base method
func (m *MockConfiguration) DumpConfig(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DumpConfig indicates an expected call of DumpConfig
func (mr *MockConfigurationMockRecorder) DumpConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpConfig", reflect.TypeOf((*MockConfiguration)(nil).DumpConfig), arg0)
}

// FlagUsage mocks base method
func (m *MockConfiguration) FlagUsage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagUsage")
	ret0, _ := ret[0].(string)
	return ret0
}

// FlagUsage indicates an expected call of FlagUsage
func (mr *MockConfigurationMockRecorder) FlagUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagUsage", reflect.TypeOf((*MockConfiguration)(nil).FlagUsage))
}

// FlagValues mocks base method
func (m *MockConfiguration) FlagValues() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagValues")
	ret0, _ := ret[0].(string)
	return ret0
}

// FlagValues indicates an expected call of FlagValues
func (mr *MockConfigurationMockRecorder) FlagValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagValues", reflect.TypeOf((*MockConfiguration)(nil).FlagValues))
}

// Get mocks base method
func (m *MockConfiguration) Get(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockConfigurationMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfiguration)(nil).Get), arg0)
}

// GetBool mocks base method
func (m *MockConfiguration) GetBool(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool
func (mr *MockConfigurationMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockConfiguration)(nil).GetBool), arg0)
}

// GetDuration mocks base method
func (m *MockConfiguration) GetDuration(arg0 string) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration
func (mr *MockConfigurationMockRecorder) GetDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockConfiguration)(nil).GetDuration), arg0)
}

// GetFirst mocks base method
func (m *MockConfiguration) GetFirst(arg0 ...string) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirst", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetFirst indicates an expected call of GetFirst
func (mr *MockConfigurationMockRecorder) GetFirst(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirst", reflect.TypeOf((*MockConfiguration)(nil).GetFirst), arg0...)
}

// GetFloat64 mocks base method
func (m *MockConfiguration) GetFloat64(arg0 string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat64 indicates an expected call of GetFloat64
func (mr *MockConfigurationMockRecorder) GetFloat64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockConfiguration)(nil).GetFloat64), arg0)
}

// GetInt mocks base method
func (m *MockConfiguration) GetInt(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt
func (mr *MockConfigurationMockRecorder) GetInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockConfiguration)(nil).GetInt), arg0)
}

// GetInt64 mocks base method
func (m *MockConfiguration) GetInt64(arg0 string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetInt64 indicates an expected call of GetInt64
func (mr *MockConfigurationMockRecorder) GetInt64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockConfiguration)(nil).GetInt64), arg0)
}

// GetMap mocks base method
func (m *MockConfiguration) GetMap(arg0 string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMap", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetMap indicates an expected call of GetMap
func (mr *MockConfigurationMockRecorder) GetMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockConfiguration)(nil).GetMap), arg0)
}

// GetNumSlice mocks base method
func (m *MockConfiguration) GetNumSlice(arg0 string) config.NumSlice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumSlice", arg0)
	ret0, _ := ret[0].(config.NumSlice)
	return ret0
}

// GetNumSlice indicates an expected call of GetNumSlice
func (mr *MockConfigurationMockRecorder) GetNumSlice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumSlice", reflect.TypeOf((*MockConfiguration)(nil).GetNumSlice), arg0)
}

// GetString mocks base method
func (m *MockConfiguration) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString
func (mr *MockConfigurationMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfiguration)(nil).GetString), arg0)
}

// GetStringSlice mocks base method
func (m *MockConfiguration) GetStringSlice(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringSlice", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringSlice indicates an expected call of GetStringSlice
func (mr *MockConfigurationMockRecorder) GetStringSlice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringSlice", reflect.TypeOf((*MockConfiguration)(nil).GetStringSlice), arg0)
}

// Lookup mocks base method
func (m *MockConfiguration) Lookup(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Lookup indicates an expected call of Lookup
func (mr *MockConfigurationMockRecorder) Lookup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockConfiguration)(nil).Lookup), arg0)
}

// Parse mocks base method
func (m *MockConfiguration) Parse(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Parse indicates an expected call of Parse
func (mr *MockConfigurationMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockConfiguration)(nil).Parse), arg0)
}

// Set mocks base method
func (m *MockConfiguration) Set(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockConfigurationMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConfiguration)(nil).Set), arg0, arg1)
}

// SetCliFlags mocks base method
func (m *MockConfiguration) SetCliFlags() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCliFlags")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCliFlags indicates an expected call of SetCliFlags
func (mr *MockConfigurationMockRecorder) SetCliFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCliFlags", reflect.TypeOf((*MockConfiguration)(nil).SetCliFlags))
}