// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calculi-corp/common_proto/go/automation (interfaces: AutomationRunStatusServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	automation "github.com/calculi-corp/common_proto/go/automation"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAutomationRunStatusServiceClient is a mock of AutomationRunStatusServiceClient interface
type MockAutomationRunStatusServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAutomationRunStatusServiceClientMockRecorder
}

// MockAutomationRunStatusServiceClientMockRecorder is the mock recorder for MockAutomationRunStatusServiceClient
type MockAutomationRunStatusServiceClientMockRecorder struct {
	mock *MockAutomationRunStatusServiceClient
}

// NewMockAutomationRunStatusServiceClient creates a new mock instance
func NewMockAutomationRunStatusServiceClient(ctrl *gomock.Controller) *MockAutomationRunStatusServiceClient {
	mock := &MockAutomationRunStatusServiceClient{ctrl: ctrl}
	mock.recorder = &MockAutomationRunStatusServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAutomationRunStatusServiceClient) EXPECT() *MockAutomationRunStatusServiceClientMockRecorder {
	return m.recorder
}

// GetAutomationRunStatuses mocks base method
func (m *MockAutomationRunStatusServiceClient) GetAutomationRunStatuses(arg0 context.Context, arg1 *automation.AutomationRunStatusRequest, arg2 ...grpc.CallOption) (*automation.AutomationRunStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutomationRunStatuses", varargs...)
	ret0, _ := ret[0].(*automation.AutomationRunStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationRunStatuses indicates an expected call of GetAutomationRunStatuses
func (mr *MockAutomationRunStatusServiceClientMockRecorder) GetAutomationRunStatuses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationRunStatuses", reflect.TypeOf((*MockAutomationRunStatusServiceClient)(nil).GetAutomationRunStatuses), varargs...)
}

// GetAutomationRunWorkflow mocks base method
func (m *MockAutomationRunStatusServiceClient) GetAutomationRunWorkflow(arg0 context.Context, arg1 *automation.AutomationRunWorkflowRequest, arg2 ...grpc.CallOption) (*automation.AutomationRunWorkflowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutomationRunWorkflow", varargs...)
	ret0, _ := ret[0].(*automation.AutomationRunWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationRunWorkflow indicates an expected call of GetAutomationRunWorkflow
func (mr *MockAutomationRunStatusServiceClientMockRecorder) GetAutomationRunWorkflow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationRunWorkflow", reflect.TypeOf((*MockAutomationRunStatusServiceClient)(nil).GetAutomationRunWorkflow), varargs...)
}

// GetComponentRunStatuses mocks base method
func (m *MockAutomationRunStatusServiceClient) GetComponentRunStatuses(arg0 context.Context, arg1 *automation.ComponentRunStatusRequest, arg2 ...grpc.CallOption) (*automation.ComponentRunStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComponentRunStatuses", varargs...)
	ret0, _ := ret[0].(*automation.ComponentRunStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentRunStatuses indicates an expected call of GetComponentRunStatuses
func (mr *MockAutomationRunStatusServiceClientMockRecorder) GetComponentRunStatuses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentRunStatuses", reflect.TypeOf((*MockAutomationRunStatusServiceClient)(nil).GetComponentRunStatuses), varargs...)
}