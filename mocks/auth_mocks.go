// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calculi-corp/api/go/auth/organization_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/calculi-corp/api/go/auth"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockOrganizationsServiceClient is a mock of OrganizationsServiceClient interface.
type MockOrganizationsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsServiceClientMockRecorder
}

// MockOrganizationsServiceClientMockRecorder is the mock recorder for MockOrganizationsServiceClient.
type MockOrganizationsServiceClientMockRecorder struct {
	mock *MockOrganizationsServiceClient
}

// NewMockOrganizationsServiceClient creates a new mock instance.
func NewMockOrganizationsServiceClient(ctrl *gomock.Controller) *MockOrganizationsServiceClient {
	mock := &MockOrganizationsServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsServiceClient) EXPECT() *MockOrganizationsServiceClientMockRecorder {
	return m.recorder
}

// AutomaticOrgCreation mocks base method.
func (m *MockOrganizationsServiceClient) AutomaticOrgCreation(ctx context.Context, in *auth.AutomaticOrgCreationRequest, opts ...grpc.CallOption) (*auth.AutomaticOrgCreationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutomaticOrgCreation", varargs...)
	ret0, _ := ret[0].(*auth.AutomaticOrgCreationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutomaticOrgCreation indicates an expected call of AutomaticOrgCreation.
func (mr *MockOrganizationsServiceClientMockRecorder) AutomaticOrgCreation(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutomaticOrgCreation", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).AutomaticOrgCreation), varargs...)
}

// CheckOrganizationDomainUniqueness mocks base method.
func (m *MockOrganizationsServiceClient) CheckOrganizationDomainUniqueness(ctx context.Context, in *auth.DomainAvailibilityRequest, opts ...grpc.CallOption) (*auth.DomainAvailibilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckOrganizationDomainUniqueness", varargs...)
	ret0, _ := ret[0].(*auth.DomainAvailibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrganizationDomainUniqueness indicates an expected call of CheckOrganizationDomainUniqueness.
func (mr *MockOrganizationsServiceClientMockRecorder) CheckOrganizationDomainUniqueness(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrganizationDomainUniqueness", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).CheckOrganizationDomainUniqueness), varargs...)
}

// CreateOrganization mocks base method.
func (m *MockOrganizationsServiceClient) CreateOrganization(ctx context.Context, in *auth.CreateOrganizationRequest, opts ...grpc.CallOption) (*auth.CreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganization", varargs...)
	ret0, _ := ret[0].(*auth.CreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationsServiceClientMockRecorder) CreateOrganization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).CreateOrganization), varargs...)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationsServiceClient) DeleteOrganization(ctx context.Context, in *auth.DeleteOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganization", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationsServiceClientMockRecorder) DeleteOrganization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).DeleteOrganization), varargs...)
}

// GetOrganizationById mocks base method.
func (m *MockOrganizationsServiceClient) GetOrganizationById(ctx context.Context, in *auth.GetOrganizationByIdRequest, opts ...grpc.CallOption) (*auth.GetOrganizationByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationById", varargs...)
	ret0, _ := ret[0].(*auth.GetOrganizationByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationById indicates an expected call of GetOrganizationById.
func (mr *MockOrganizationsServiceClientMockRecorder) GetOrganizationById(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationById", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).GetOrganizationById), varargs...)
}

// GetOrganizationByName mocks base method.
func (m *MockOrganizationsServiceClient) GetOrganizationByName(ctx context.Context, in *auth.GetOrganizationByNameRequest, opts ...grpc.CallOption) (*auth.GetOrganizationByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationByName", varargs...)
	ret0, _ := ret[0].(*auth.GetOrganizationByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockOrganizationsServiceClientMockRecorder) GetOrganizationByName(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).GetOrganizationByName), varargs...)
}

// GetOrganizations mocks base method.
func (m *MockOrganizationsServiceClient) GetOrganizations(ctx context.Context, in *auth.GetOrganizationsRequest, opts ...grpc.CallOption) (*auth.GetOrganizationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizations", varargs...)
	ret0, _ := ret[0].(*auth.GetOrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockOrganizationsServiceClientMockRecorder) GetOrganizations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).GetOrganizations), varargs...)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationsServiceClient) UpdateOrganization(ctx context.Context, in *auth.UpdateOrganizationRequest, opts ...grpc.CallOption) (*auth.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganization", varargs...)
	ret0, _ := ret[0].(*auth.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationsServiceClientMockRecorder) UpdateOrganization(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).UpdateOrganization), varargs...)
}

// VpcOrgCreation mocks base method.
func (m *MockOrganizationsServiceClient) VpcOrgCreation(ctx context.Context, in *auth.VpcOrgCreationRequest, opts ...grpc.CallOption) (*auth.VpcOrgCreationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VpcOrgCreation", varargs...)
	ret0, _ := ret[0].(*auth.VpcOrgCreationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VpcOrgCreation indicates an expected call of VpcOrgCreation.
func (mr *MockOrganizationsServiceClientMockRecorder) VpcOrgCreation(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VpcOrgCreation", reflect.TypeOf((*MockOrganizationsServiceClient)(nil).VpcOrgCreation), varargs...)
}

// MockOrganizationsServiceServer is a mock of OrganizationsServiceServer interface.
type MockOrganizationsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsServiceServerMockRecorder
}

// MockOrganizationsServiceServerMockRecorder is the mock recorder for MockOrganizationsServiceServer.
type MockOrganizationsServiceServerMockRecorder struct {
	mock *MockOrganizationsServiceServer
}

// NewMockOrganizationsServiceServer creates a new mock instance.
func NewMockOrganizationsServiceServer(ctrl *gomock.Controller) *MockOrganizationsServiceServer {
	mock := &MockOrganizationsServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrganizationsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsServiceServer) EXPECT() *MockOrganizationsServiceServerMockRecorder {
	return m.recorder
}

// AutomaticOrgCreation mocks base method.
func (m *MockOrganizationsServiceServer) AutomaticOrgCreation(arg0 context.Context, arg1 *auth.AutomaticOrgCreationRequest) (*auth.AutomaticOrgCreationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutomaticOrgCreation", arg0, arg1)
	ret0, _ := ret[0].(*auth.AutomaticOrgCreationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutomaticOrgCreation indicates an expected call of AutomaticOrgCreation.
func (mr *MockOrganizationsServiceServerMockRecorder) AutomaticOrgCreation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutomaticOrgCreation", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).AutomaticOrgCreation), arg0, arg1)
}

// CheckOrganizationDomainUniqueness mocks base method.
func (m *MockOrganizationsServiceServer) CheckOrganizationDomainUniqueness(arg0 context.Context, arg1 *auth.DomainAvailibilityRequest) (*auth.DomainAvailibilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrganizationDomainUniqueness", arg0, arg1)
	ret0, _ := ret[0].(*auth.DomainAvailibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrganizationDomainUniqueness indicates an expected call of CheckOrganizationDomainUniqueness.
func (mr *MockOrganizationsServiceServerMockRecorder) CheckOrganizationDomainUniqueness(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrganizationDomainUniqueness", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).CheckOrganizationDomainUniqueness), arg0, arg1)
}

// CreateOrganization mocks base method.
func (m *MockOrganizationsServiceServer) CreateOrganization(arg0 context.Context, arg1 *auth.CreateOrganizationRequest) (*auth.CreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*auth.CreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationsServiceServerMockRecorder) CreateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).CreateOrganization), arg0, arg1)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationsServiceServer) DeleteOrganization(arg0 context.Context, arg1 *auth.DeleteOrganizationRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationsServiceServerMockRecorder) DeleteOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).DeleteOrganization), arg0, arg1)
}

// GetOrganizationById mocks base method.
func (m *MockOrganizationsServiceServer) GetOrganizationById(arg0 context.Context, arg1 *auth.GetOrganizationByIdRequest) (*auth.GetOrganizationByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationById", arg0, arg1)
	ret0, _ := ret[0].(*auth.GetOrganizationByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationById indicates an expected call of GetOrganizationById.
func (mr *MockOrganizationsServiceServerMockRecorder) GetOrganizationById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationById", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).GetOrganizationById), arg0, arg1)
}

// GetOrganizationByName mocks base method.
func (m *MockOrganizationsServiceServer) GetOrganizationByName(arg0 context.Context, arg1 *auth.GetOrganizationByNameRequest) (*auth.GetOrganizationByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByName", arg0, arg1)
	ret0, _ := ret[0].(*auth.GetOrganizationByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockOrganizationsServiceServerMockRecorder) GetOrganizationByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).GetOrganizationByName), arg0, arg1)
}

// GetOrganizations mocks base method.
func (m *MockOrganizationsServiceServer) GetOrganizations(arg0 context.Context, arg1 *auth.GetOrganizationsRequest) (*auth.GetOrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", arg0, arg1)
	ret0, _ := ret[0].(*auth.GetOrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockOrganizationsServiceServerMockRecorder) GetOrganizations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).GetOrganizations), arg0, arg1)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationsServiceServer) UpdateOrganization(arg0 context.Context, arg1 *auth.UpdateOrganizationRequest) (*auth.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*auth.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationsServiceServerMockRecorder) UpdateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).UpdateOrganization), arg0, arg1)
}

// VpcOrgCreation mocks base method.
func (m *MockOrganizationsServiceServer) VpcOrgCreation(arg0 context.Context, arg1 *auth.VpcOrgCreationRequest) (*auth.VpcOrgCreationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VpcOrgCreation", arg0, arg1)
	ret0, _ := ret[0].(*auth.VpcOrgCreationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VpcOrgCreation indicates an expected call of VpcOrgCreation.
func (mr *MockOrganizationsServiceServerMockRecorder) VpcOrgCreation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VpcOrgCreation", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).VpcOrgCreation), arg0, arg1)
}

// mustEmbedUnimplementedOrganizationsServiceServer mocks base method.
func (m *MockOrganizationsServiceServer) mustEmbedUnimplementedOrganizationsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrganizationsServiceServer")
}

// mustEmbedUnimplementedOrganizationsServiceServer indicates an expected call of mustEmbedUnimplementedOrganizationsServiceServer.
func (mr *MockOrganizationsServiceServerMockRecorder) mustEmbedUnimplementedOrganizationsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrganizationsServiceServer", reflect.TypeOf((*MockOrganizationsServiceServer)(nil).mustEmbedUnimplementedOrganizationsServiceServer))
}

// MockUnsafeOrganizationsServiceServer is a mock of UnsafeOrganizationsServiceServer interface.
type MockUnsafeOrganizationsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrganizationsServiceServerMockRecorder
}

// MockUnsafeOrganizationsServiceServerMockRecorder is the mock recorder for MockUnsafeOrganizationsServiceServer.
type MockUnsafeOrganizationsServiceServerMockRecorder struct {
	mock *MockUnsafeOrganizationsServiceServer
}

// NewMockUnsafeOrganizationsServiceServer creates a new mock instance.
func NewMockUnsafeOrganizationsServiceServer(ctrl *gomock.Controller) *MockUnsafeOrganizationsServiceServer {
	mock := &MockUnsafeOrganizationsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrganizationsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrganizationsServiceServer) EXPECT() *MockUnsafeOrganizationsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrganizationsServiceServer mocks base method.
func (m *MockUnsafeOrganizationsServiceServer) mustEmbedUnimplementedOrganizationsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrganizationsServiceServer")
}

// mustEmbedUnimplementedOrganizationsServiceServer indicates an expected call of mustEmbedUnimplementedOrganizationsServiceServer.
func (mr *MockUnsafeOrganizationsServiceServerMockRecorder) mustEmbedUnimplementedOrganizationsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrganizationsServiceServer", reflect.TypeOf((*MockUnsafeOrganizationsServiceServer)(nil).mustEmbedUnimplementedOrganizationsServiceServer))
}
